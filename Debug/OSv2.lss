
OSv2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d3e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000d3e  00000dd2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000056  00800062  00800062  00000dd4  2**0
                  ALLOC
  3 .stab         00001314  00000000  00000000  00000dd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e0c  00000000  00000000  000020e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e3       	ldi	r30, 0x3E	; 62
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 3b       	cpi	r26, 0xB8	; 184
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 51 06 	call	0xca2	; 0xca2 <main>
  8a:	0c 94 9d 06 	jmp	0xd3a	; 0xd3a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_WritePin>:

#include "DIO_operations.h"
#include "Memory_map.h"

void DIO_WritePin(uint8 PinNum,uint8 PinValue)
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	00 d0       	rcall	.+0      	; 0x98 <DIO_WritePin+0x6>
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
  9c:	89 83       	std	Y+1, r24	; 0x01
  9e:	6a 83       	std	Y+2, r22	; 0x02
if(PinValue==1)
  a0:	8a 81       	ldd	r24, Y+2	; 0x02
  a2:	81 30       	cpi	r24, 0x01	; 1
  a4:	09 f0       	breq	.+2      	; 0xa8 <DIO_WritePin+0x16>
  a6:	70 c0       	rjmp	.+224    	; 0x188 <DIO_WritePin+0xf6>
{
	if(PinNum>=PinA0&&PinNum<=PinA7)
  a8:	89 81       	ldd	r24, Y+1	; 0x01
  aa:	88 30       	cpi	r24, 0x08	; 8
  ac:	a0 f4       	brcc	.+40     	; 0xd6 <DIO_WritePin+0x44>
	{
		Set_Bit(PORTA,PinNum);
  ae:	ab e3       	ldi	r26, 0x3B	; 59
  b0:	b0 e0       	ldi	r27, 0x00	; 0
  b2:	eb e3       	ldi	r30, 0x3B	; 59
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	48 2f       	mov	r20, r24
  ba:	89 81       	ldd	r24, Y+1	; 0x01
  bc:	28 2f       	mov	r18, r24
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	02 2e       	mov	r0, r18
  c6:	02 c0       	rjmp	.+4      	; 0xcc <DIO_WritePin+0x3a>
  c8:	88 0f       	add	r24, r24
  ca:	99 1f       	adc	r25, r25
  cc:	0a 94       	dec	r0
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <DIO_WritePin+0x36>
  d0:	84 2b       	or	r24, r20
  d2:	8c 93       	st	X, r24
  d4:	ce c0       	rjmp	.+412    	; 0x272 <DIO_WritePin+0x1e0>
	}
	else if(PinNum>=PinB0&&PinNum<=PinB7)
  d6:	89 81       	ldd	r24, Y+1	; 0x01
  d8:	88 30       	cpi	r24, 0x08	; 8
  da:	d0 f0       	brcs	.+52     	; 0x110 <DIO_WritePin+0x7e>
  dc:	89 81       	ldd	r24, Y+1	; 0x01
  de:	80 31       	cpi	r24, 0x10	; 16
  e0:	b8 f4       	brcc	.+46     	; 0x110 <DIO_WritePin+0x7e>
	{
		Set_Bit(PORTB,(PinNum-8));
  e2:	a8 e3       	ldi	r26, 0x38	; 56
  e4:	b0 e0       	ldi	r27, 0x00	; 0
  e6:	e8 e3       	ldi	r30, 0x38	; 56
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	48 2f       	mov	r20, r24
  ee:	89 81       	ldd	r24, Y+1	; 0x01
  f0:	88 2f       	mov	r24, r24
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	9c 01       	movw	r18, r24
  f6:	28 50       	subi	r18, 0x08	; 8
  f8:	30 40       	sbci	r19, 0x00	; 0
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	02 2e       	mov	r0, r18
 100:	02 c0       	rjmp	.+4      	; 0x106 <DIO_WritePin+0x74>
 102:	88 0f       	add	r24, r24
 104:	99 1f       	adc	r25, r25
 106:	0a 94       	dec	r0
 108:	e2 f7       	brpl	.-8      	; 0x102 <DIO_WritePin+0x70>
 10a:	84 2b       	or	r24, r20
 10c:	8c 93       	st	X, r24
 10e:	b1 c0       	rjmp	.+354    	; 0x272 <DIO_WritePin+0x1e0>
	}
	else if(PinNum>=PinC0&&PinNum<=PinC7)
 110:	89 81       	ldd	r24, Y+1	; 0x01
 112:	80 31       	cpi	r24, 0x10	; 16
 114:	d0 f0       	brcs	.+52     	; 0x14a <DIO_WritePin+0xb8>
 116:	89 81       	ldd	r24, Y+1	; 0x01
 118:	88 31       	cpi	r24, 0x18	; 24
 11a:	b8 f4       	brcc	.+46     	; 0x14a <DIO_WritePin+0xb8>
	{
		Set_Bit(PORTC,(PinNum-16));
 11c:	a5 e3       	ldi	r26, 0x35	; 53
 11e:	b0 e0       	ldi	r27, 0x00	; 0
 120:	e5 e3       	ldi	r30, 0x35	; 53
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	48 2f       	mov	r20, r24
 128:	89 81       	ldd	r24, Y+1	; 0x01
 12a:	88 2f       	mov	r24, r24
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	9c 01       	movw	r18, r24
 130:	20 51       	subi	r18, 0x10	; 16
 132:	30 40       	sbci	r19, 0x00	; 0
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	02 2e       	mov	r0, r18
 13a:	02 c0       	rjmp	.+4      	; 0x140 <DIO_WritePin+0xae>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	0a 94       	dec	r0
 142:	e2 f7       	brpl	.-8      	; 0x13c <DIO_WritePin+0xaa>
 144:	84 2b       	or	r24, r20
 146:	8c 93       	st	X, r24
 148:	94 c0       	rjmp	.+296    	; 0x272 <DIO_WritePin+0x1e0>
	}
	else if(PinNum>=PinD0&&PinNum<=PinD7)
 14a:	89 81       	ldd	r24, Y+1	; 0x01
 14c:	88 31       	cpi	r24, 0x18	; 24
 14e:	08 f4       	brcc	.+2      	; 0x152 <DIO_WritePin+0xc0>
 150:	90 c0       	rjmp	.+288    	; 0x272 <DIO_WritePin+0x1e0>
 152:	89 81       	ldd	r24, Y+1	; 0x01
 154:	80 32       	cpi	r24, 0x20	; 32
 156:	08 f0       	brcs	.+2      	; 0x15a <DIO_WritePin+0xc8>
 158:	8c c0       	rjmp	.+280    	; 0x272 <DIO_WritePin+0x1e0>
	{
		Set_Bit(PORTD,(PinNum-24));
 15a:	a2 e3       	ldi	r26, 0x32	; 50
 15c:	b0 e0       	ldi	r27, 0x00	; 0
 15e:	e2 e3       	ldi	r30, 0x32	; 50
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	48 2f       	mov	r20, r24
 166:	89 81       	ldd	r24, Y+1	; 0x01
 168:	88 2f       	mov	r24, r24
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	9c 01       	movw	r18, r24
 16e:	28 51       	subi	r18, 0x18	; 24
 170:	30 40       	sbci	r19, 0x00	; 0
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	02 2e       	mov	r0, r18
 178:	02 c0       	rjmp	.+4      	; 0x17e <DIO_WritePin+0xec>
 17a:	88 0f       	add	r24, r24
 17c:	99 1f       	adc	r25, r25
 17e:	0a 94       	dec	r0
 180:	e2 f7       	brpl	.-8      	; 0x17a <DIO_WritePin+0xe8>
 182:	84 2b       	or	r24, r20
 184:	8c 93       	st	X, r24
 186:	75 c0       	rjmp	.+234    	; 0x272 <DIO_WritePin+0x1e0>
	}
}
else if(PinValue==0)
 188:	8a 81       	ldd	r24, Y+2	; 0x02
 18a:	88 23       	and	r24, r24
 18c:	09 f0       	breq	.+2      	; 0x190 <DIO_WritePin+0xfe>
 18e:	71 c0       	rjmp	.+226    	; 0x272 <DIO_WritePin+0x1e0>
{
	if(PinNum>=PinA0&&PinNum<=PinA7)
 190:	89 81       	ldd	r24, Y+1	; 0x01
 192:	88 30       	cpi	r24, 0x08	; 8
 194:	a8 f4       	brcc	.+42     	; 0x1c0 <DIO_WritePin+0x12e>
	{
		Clear_Bit(PORTA,PinNum);
 196:	ab e3       	ldi	r26, 0x3B	; 59
 198:	b0 e0       	ldi	r27, 0x00	; 0
 19a:	eb e3       	ldi	r30, 0x3B	; 59
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	80 81       	ld	r24, Z
 1a0:	48 2f       	mov	r20, r24
 1a2:	89 81       	ldd	r24, Y+1	; 0x01
 1a4:	28 2f       	mov	r18, r24
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	02 2e       	mov	r0, r18
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <DIO_WritePin+0x122>
 1b0:	88 0f       	add	r24, r24
 1b2:	99 1f       	adc	r25, r25
 1b4:	0a 94       	dec	r0
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <DIO_WritePin+0x11e>
 1b8:	80 95       	com	r24
 1ba:	84 23       	and	r24, r20
 1bc:	8c 93       	st	X, r24
 1be:	59 c0       	rjmp	.+178    	; 0x272 <DIO_WritePin+0x1e0>
	}
	else if(PinNum>=PinB0&&PinNum<=PinB7)
 1c0:	89 81       	ldd	r24, Y+1	; 0x01
 1c2:	88 30       	cpi	r24, 0x08	; 8
 1c4:	d8 f0       	brcs	.+54     	; 0x1fc <DIO_WritePin+0x16a>
 1c6:	89 81       	ldd	r24, Y+1	; 0x01
 1c8:	80 31       	cpi	r24, 0x10	; 16
 1ca:	c0 f4       	brcc	.+48     	; 0x1fc <DIO_WritePin+0x16a>
	{
		Clear_Bit(PORTB,(PinNum-8));
 1cc:	a8 e3       	ldi	r26, 0x38	; 56
 1ce:	b0 e0       	ldi	r27, 0x00	; 0
 1d0:	e8 e3       	ldi	r30, 0x38	; 56
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	48 2f       	mov	r20, r24
 1d8:	89 81       	ldd	r24, Y+1	; 0x01
 1da:	88 2f       	mov	r24, r24
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	9c 01       	movw	r18, r24
 1e0:	28 50       	subi	r18, 0x08	; 8
 1e2:	30 40       	sbci	r19, 0x00	; 0
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	02 2e       	mov	r0, r18
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_WritePin+0x15e>
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	0a 94       	dec	r0
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_WritePin+0x15a>
 1f4:	80 95       	com	r24
 1f6:	84 23       	and	r24, r20
 1f8:	8c 93       	st	X, r24
 1fa:	3b c0       	rjmp	.+118    	; 0x272 <DIO_WritePin+0x1e0>
	}
	else if(PinNum>=PinC0&&PinNum<=PinC7)
 1fc:	89 81       	ldd	r24, Y+1	; 0x01
 1fe:	80 31       	cpi	r24, 0x10	; 16
 200:	d8 f0       	brcs	.+54     	; 0x238 <DIO_WritePin+0x1a6>
 202:	89 81       	ldd	r24, Y+1	; 0x01
 204:	88 31       	cpi	r24, 0x18	; 24
 206:	c0 f4       	brcc	.+48     	; 0x238 <DIO_WritePin+0x1a6>
	{
		Clear_Bit(PORTC,(PinNum-16));
 208:	a5 e3       	ldi	r26, 0x35	; 53
 20a:	b0 e0       	ldi	r27, 0x00	; 0
 20c:	e5 e3       	ldi	r30, 0x35	; 53
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	80 81       	ld	r24, Z
 212:	48 2f       	mov	r20, r24
 214:	89 81       	ldd	r24, Y+1	; 0x01
 216:	88 2f       	mov	r24, r24
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	9c 01       	movw	r18, r24
 21c:	20 51       	subi	r18, 0x10	; 16
 21e:	30 40       	sbci	r19, 0x00	; 0
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	02 2e       	mov	r0, r18
 226:	02 c0       	rjmp	.+4      	; 0x22c <DIO_WritePin+0x19a>
 228:	88 0f       	add	r24, r24
 22a:	99 1f       	adc	r25, r25
 22c:	0a 94       	dec	r0
 22e:	e2 f7       	brpl	.-8      	; 0x228 <DIO_WritePin+0x196>
 230:	80 95       	com	r24
 232:	84 23       	and	r24, r20
 234:	8c 93       	st	X, r24
 236:	1d c0       	rjmp	.+58     	; 0x272 <DIO_WritePin+0x1e0>
	}
	else if(PinNum>=PinD0&&PinNum<=PinD7)
 238:	89 81       	ldd	r24, Y+1	; 0x01
 23a:	88 31       	cpi	r24, 0x18	; 24
 23c:	d0 f0       	brcs	.+52     	; 0x272 <DIO_WritePin+0x1e0>
 23e:	89 81       	ldd	r24, Y+1	; 0x01
 240:	80 32       	cpi	r24, 0x20	; 32
 242:	b8 f4       	brcc	.+46     	; 0x272 <DIO_WritePin+0x1e0>
	{
		Clear_Bit(PORTD,(PinNum-24));
 244:	a2 e3       	ldi	r26, 0x32	; 50
 246:	b0 e0       	ldi	r27, 0x00	; 0
 248:	e2 e3       	ldi	r30, 0x32	; 50
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	48 2f       	mov	r20, r24
 250:	89 81       	ldd	r24, Y+1	; 0x01
 252:	88 2f       	mov	r24, r24
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	9c 01       	movw	r18, r24
 258:	28 51       	subi	r18, 0x18	; 24
 25a:	30 40       	sbci	r19, 0x00	; 0
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	02 2e       	mov	r0, r18
 262:	02 c0       	rjmp	.+4      	; 0x268 <DIO_WritePin+0x1d6>
 264:	88 0f       	add	r24, r24
 266:	99 1f       	adc	r25, r25
 268:	0a 94       	dec	r0
 26a:	e2 f7       	brpl	.-8      	; 0x264 <DIO_WritePin+0x1d2>
 26c:	80 95       	com	r24
 26e:	84 23       	and	r24, r20
 270:	8c 93       	st	X, r24
	}
}
}
 272:	0f 90       	pop	r0
 274:	0f 90       	pop	r0
 276:	cf 91       	pop	r28
 278:	df 91       	pop	r29
 27a:	08 95       	ret

0000027c <DIO_ReadPin>:
uint8 DIO_ReadPin(uint8 PinNum)
{
 27c:	df 93       	push	r29
 27e:	cf 93       	push	r28
 280:	00 d0       	rcall	.+0      	; 0x282 <DIO_ReadPin+0x6>
 282:	cd b7       	in	r28, 0x3d	; 61
 284:	de b7       	in	r29, 0x3e	; 62
 286:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Pin_Value;
	if(PinNum>=PinA0&&PinNum<=PinA7)
 288:	8a 81       	ldd	r24, Y+2	; 0x02
 28a:	88 30       	cpi	r24, 0x08	; 8
 28c:	90 f4       	brcc	.+36     	; 0x2b2 <DIO_ReadPin+0x36>
	{
		Pin_Value=Get_Bit(PINA,PinNum);
 28e:	e9 e3       	ldi	r30, 0x39	; 57
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	80 81       	ld	r24, Z
 294:	48 2f       	mov	r20, r24
 296:	8a 81       	ldd	r24, Y+2	; 0x02
 298:	28 2f       	mov	r18, r24
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	02 2e       	mov	r0, r18
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <DIO_ReadPin+0x2c>
 2a4:	88 0f       	add	r24, r24
 2a6:	99 1f       	adc	r25, r25
 2a8:	0a 94       	dec	r0
 2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <DIO_ReadPin+0x28>
 2ac:	84 23       	and	r24, r20
 2ae:	89 83       	std	Y+1, r24	; 0x01
 2b0:	50 c0       	rjmp	.+160    	; 0x352 <DIO_ReadPin+0xd6>
	}
	else if(PinNum>=PinB0&&PinNum<=PinB7)
 2b2:	8a 81       	ldd	r24, Y+2	; 0x02
 2b4:	88 30       	cpi	r24, 0x08	; 8
 2b6:	c0 f0       	brcs	.+48     	; 0x2e8 <DIO_ReadPin+0x6c>
 2b8:	8a 81       	ldd	r24, Y+2	; 0x02
 2ba:	80 31       	cpi	r24, 0x10	; 16
 2bc:	a8 f4       	brcc	.+42     	; 0x2e8 <DIO_ReadPin+0x6c>
	{
		Pin_Value=Get_Bit(PINB,(PinNum-8));
 2be:	e6 e3       	ldi	r30, 0x36	; 54
 2c0:	f0 e0       	ldi	r31, 0x00	; 0
 2c2:	80 81       	ld	r24, Z
 2c4:	48 2f       	mov	r20, r24
 2c6:	8a 81       	ldd	r24, Y+2	; 0x02
 2c8:	88 2f       	mov	r24, r24
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	9c 01       	movw	r18, r24
 2ce:	28 50       	subi	r18, 0x08	; 8
 2d0:	30 40       	sbci	r19, 0x00	; 0
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	02 2e       	mov	r0, r18
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <DIO_ReadPin+0x62>
 2da:	88 0f       	add	r24, r24
 2dc:	99 1f       	adc	r25, r25
 2de:	0a 94       	dec	r0
 2e0:	e2 f7       	brpl	.-8      	; 0x2da <DIO_ReadPin+0x5e>
 2e2:	84 23       	and	r24, r20
 2e4:	89 83       	std	Y+1, r24	; 0x01
 2e6:	35 c0       	rjmp	.+106    	; 0x352 <DIO_ReadPin+0xd6>
	}
	else if(PinNum>=PinC0&&PinNum<=PinC7)
 2e8:	8a 81       	ldd	r24, Y+2	; 0x02
 2ea:	80 31       	cpi	r24, 0x10	; 16
 2ec:	c0 f0       	brcs	.+48     	; 0x31e <DIO_ReadPin+0xa2>
 2ee:	8a 81       	ldd	r24, Y+2	; 0x02
 2f0:	88 31       	cpi	r24, 0x18	; 24
 2f2:	a8 f4       	brcc	.+42     	; 0x31e <DIO_ReadPin+0xa2>
	{
		Pin_Value=Get_Bit(PINC,(PinNum-16));
 2f4:	e3 e3       	ldi	r30, 0x33	; 51
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	80 81       	ld	r24, Z
 2fa:	48 2f       	mov	r20, r24
 2fc:	8a 81       	ldd	r24, Y+2	; 0x02
 2fe:	88 2f       	mov	r24, r24
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	9c 01       	movw	r18, r24
 304:	20 51       	subi	r18, 0x10	; 16
 306:	30 40       	sbci	r19, 0x00	; 0
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	02 2e       	mov	r0, r18
 30e:	02 c0       	rjmp	.+4      	; 0x314 <DIO_ReadPin+0x98>
 310:	88 0f       	add	r24, r24
 312:	99 1f       	adc	r25, r25
 314:	0a 94       	dec	r0
 316:	e2 f7       	brpl	.-8      	; 0x310 <DIO_ReadPin+0x94>
 318:	84 23       	and	r24, r20
 31a:	89 83       	std	Y+1, r24	; 0x01
 31c:	1a c0       	rjmp	.+52     	; 0x352 <DIO_ReadPin+0xd6>
	}
	else if(PinNum>=PinD0&&PinNum<=PinD7)
 31e:	8a 81       	ldd	r24, Y+2	; 0x02
 320:	88 31       	cpi	r24, 0x18	; 24
 322:	b8 f0       	brcs	.+46     	; 0x352 <DIO_ReadPin+0xd6>
 324:	8a 81       	ldd	r24, Y+2	; 0x02
 326:	80 32       	cpi	r24, 0x20	; 32
 328:	a0 f4       	brcc	.+40     	; 0x352 <DIO_ReadPin+0xd6>
	{
		Pin_Value=Get_Bit(PIND,(PinNum-24));
 32a:	e0 e3       	ldi	r30, 0x30	; 48
 32c:	f0 e0       	ldi	r31, 0x00	; 0
 32e:	80 81       	ld	r24, Z
 330:	48 2f       	mov	r20, r24
 332:	8a 81       	ldd	r24, Y+2	; 0x02
 334:	88 2f       	mov	r24, r24
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	9c 01       	movw	r18, r24
 33a:	28 51       	subi	r18, 0x18	; 24
 33c:	30 40       	sbci	r19, 0x00	; 0
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	02 2e       	mov	r0, r18
 344:	02 c0       	rjmp	.+4      	; 0x34a <DIO_ReadPin+0xce>
 346:	88 0f       	add	r24, r24
 348:	99 1f       	adc	r25, r25
 34a:	0a 94       	dec	r0
 34c:	e2 f7       	brpl	.-8      	; 0x346 <DIO_ReadPin+0xca>
 34e:	84 23       	and	r24, r20
 350:	89 83       	std	Y+1, r24	; 0x01
	}
	return Pin_Value;
 352:	89 81       	ldd	r24, Y+1	; 0x01
}
 354:	0f 90       	pop	r0
 356:	0f 90       	pop	r0
 358:	cf 91       	pop	r28
 35a:	df 91       	pop	r29
 35c:	08 95       	ret

0000035e <DIO_SetPinDirection>:
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection)
{
 35e:	df 93       	push	r29
 360:	cf 93       	push	r28
 362:	00 d0       	rcall	.+0      	; 0x364 <DIO_SetPinDirection+0x6>
 364:	cd b7       	in	r28, 0x3d	; 61
 366:	de b7       	in	r29, 0x3e	; 62
 368:	89 83       	std	Y+1, r24	; 0x01
 36a:	6a 83       	std	Y+2, r22	; 0x02
	if(PinDirection==1)
 36c:	8a 81       	ldd	r24, Y+2	; 0x02
 36e:	81 30       	cpi	r24, 0x01	; 1
 370:	09 f0       	breq	.+2      	; 0x374 <DIO_SetPinDirection+0x16>
 372:	70 c0       	rjmp	.+224    	; 0x454 <DIO_SetPinDirection+0xf6>
	{
		if(PinNum>=PinA0&&PinNum<=PinA7)
 374:	89 81       	ldd	r24, Y+1	; 0x01
 376:	88 30       	cpi	r24, 0x08	; 8
 378:	a0 f4       	brcc	.+40     	; 0x3a2 <DIO_SetPinDirection+0x44>
		{
			Set_Bit(DDRA,PinNum);
 37a:	aa e3       	ldi	r26, 0x3A	; 58
 37c:	b0 e0       	ldi	r27, 0x00	; 0
 37e:	ea e3       	ldi	r30, 0x3A	; 58
 380:	f0 e0       	ldi	r31, 0x00	; 0
 382:	80 81       	ld	r24, Z
 384:	48 2f       	mov	r20, r24
 386:	89 81       	ldd	r24, Y+1	; 0x01
 388:	28 2f       	mov	r18, r24
 38a:	30 e0       	ldi	r19, 0x00	; 0
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	02 2e       	mov	r0, r18
 392:	02 c0       	rjmp	.+4      	; 0x398 <DIO_SetPinDirection+0x3a>
 394:	88 0f       	add	r24, r24
 396:	99 1f       	adc	r25, r25
 398:	0a 94       	dec	r0
 39a:	e2 f7       	brpl	.-8      	; 0x394 <DIO_SetPinDirection+0x36>
 39c:	84 2b       	or	r24, r20
 39e:	8c 93       	st	X, r24
 3a0:	ce c0       	rjmp	.+412    	; 0x53e <DIO_SetPinDirection+0x1e0>
		}
		else if(PinNum>=PinB0&&PinNum<=PinB7)
 3a2:	89 81       	ldd	r24, Y+1	; 0x01
 3a4:	88 30       	cpi	r24, 0x08	; 8
 3a6:	d0 f0       	brcs	.+52     	; 0x3dc <DIO_SetPinDirection+0x7e>
 3a8:	89 81       	ldd	r24, Y+1	; 0x01
 3aa:	80 31       	cpi	r24, 0x10	; 16
 3ac:	b8 f4       	brcc	.+46     	; 0x3dc <DIO_SetPinDirection+0x7e>
		{
			Set_Bit(DDRB,(PinNum-8));
 3ae:	a7 e3       	ldi	r26, 0x37	; 55
 3b0:	b0 e0       	ldi	r27, 0x00	; 0
 3b2:	e7 e3       	ldi	r30, 0x37	; 55
 3b4:	f0 e0       	ldi	r31, 0x00	; 0
 3b6:	80 81       	ld	r24, Z
 3b8:	48 2f       	mov	r20, r24
 3ba:	89 81       	ldd	r24, Y+1	; 0x01
 3bc:	88 2f       	mov	r24, r24
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	9c 01       	movw	r18, r24
 3c2:	28 50       	subi	r18, 0x08	; 8
 3c4:	30 40       	sbci	r19, 0x00	; 0
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	02 2e       	mov	r0, r18
 3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <DIO_SetPinDirection+0x74>
 3ce:	88 0f       	add	r24, r24
 3d0:	99 1f       	adc	r25, r25
 3d2:	0a 94       	dec	r0
 3d4:	e2 f7       	brpl	.-8      	; 0x3ce <DIO_SetPinDirection+0x70>
 3d6:	84 2b       	or	r24, r20
 3d8:	8c 93       	st	X, r24
 3da:	b1 c0       	rjmp	.+354    	; 0x53e <DIO_SetPinDirection+0x1e0>
		}
		else if(PinNum>=PinC0&&PinNum<=PinC7)
 3dc:	89 81       	ldd	r24, Y+1	; 0x01
 3de:	80 31       	cpi	r24, 0x10	; 16
 3e0:	d0 f0       	brcs	.+52     	; 0x416 <DIO_SetPinDirection+0xb8>
 3e2:	89 81       	ldd	r24, Y+1	; 0x01
 3e4:	88 31       	cpi	r24, 0x18	; 24
 3e6:	b8 f4       	brcc	.+46     	; 0x416 <DIO_SetPinDirection+0xb8>
		{
			Set_Bit(DDRC,(PinNum-16));
 3e8:	a4 e3       	ldi	r26, 0x34	; 52
 3ea:	b0 e0       	ldi	r27, 0x00	; 0
 3ec:	e4 e3       	ldi	r30, 0x34	; 52
 3ee:	f0 e0       	ldi	r31, 0x00	; 0
 3f0:	80 81       	ld	r24, Z
 3f2:	48 2f       	mov	r20, r24
 3f4:	89 81       	ldd	r24, Y+1	; 0x01
 3f6:	88 2f       	mov	r24, r24
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	9c 01       	movw	r18, r24
 3fc:	20 51       	subi	r18, 0x10	; 16
 3fe:	30 40       	sbci	r19, 0x00	; 0
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	02 2e       	mov	r0, r18
 406:	02 c0       	rjmp	.+4      	; 0x40c <DIO_SetPinDirection+0xae>
 408:	88 0f       	add	r24, r24
 40a:	99 1f       	adc	r25, r25
 40c:	0a 94       	dec	r0
 40e:	e2 f7       	brpl	.-8      	; 0x408 <DIO_SetPinDirection+0xaa>
 410:	84 2b       	or	r24, r20
 412:	8c 93       	st	X, r24
 414:	94 c0       	rjmp	.+296    	; 0x53e <DIO_SetPinDirection+0x1e0>
		}
		else if(PinNum>=PinD0&&PinNum<=PinD7)
 416:	89 81       	ldd	r24, Y+1	; 0x01
 418:	88 31       	cpi	r24, 0x18	; 24
 41a:	08 f4       	brcc	.+2      	; 0x41e <DIO_SetPinDirection+0xc0>
 41c:	90 c0       	rjmp	.+288    	; 0x53e <DIO_SetPinDirection+0x1e0>
 41e:	89 81       	ldd	r24, Y+1	; 0x01
 420:	80 32       	cpi	r24, 0x20	; 32
 422:	08 f0       	brcs	.+2      	; 0x426 <DIO_SetPinDirection+0xc8>
 424:	8c c0       	rjmp	.+280    	; 0x53e <DIO_SetPinDirection+0x1e0>
		{
			Set_Bit(DDRC,(PinNum-24));
 426:	a4 e3       	ldi	r26, 0x34	; 52
 428:	b0 e0       	ldi	r27, 0x00	; 0
 42a:	e4 e3       	ldi	r30, 0x34	; 52
 42c:	f0 e0       	ldi	r31, 0x00	; 0
 42e:	80 81       	ld	r24, Z
 430:	48 2f       	mov	r20, r24
 432:	89 81       	ldd	r24, Y+1	; 0x01
 434:	88 2f       	mov	r24, r24
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	9c 01       	movw	r18, r24
 43a:	28 51       	subi	r18, 0x18	; 24
 43c:	30 40       	sbci	r19, 0x00	; 0
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	02 2e       	mov	r0, r18
 444:	02 c0       	rjmp	.+4      	; 0x44a <DIO_SetPinDirection+0xec>
 446:	88 0f       	add	r24, r24
 448:	99 1f       	adc	r25, r25
 44a:	0a 94       	dec	r0
 44c:	e2 f7       	brpl	.-8      	; 0x446 <DIO_SetPinDirection+0xe8>
 44e:	84 2b       	or	r24, r20
 450:	8c 93       	st	X, r24
 452:	75 c0       	rjmp	.+234    	; 0x53e <DIO_SetPinDirection+0x1e0>
		}
	}
	else if(PinDirection==0)
 454:	8a 81       	ldd	r24, Y+2	; 0x02
 456:	88 23       	and	r24, r24
 458:	09 f0       	breq	.+2      	; 0x45c <DIO_SetPinDirection+0xfe>
 45a:	71 c0       	rjmp	.+226    	; 0x53e <DIO_SetPinDirection+0x1e0>
	{
		if(PinNum>=PinA0&&PinNum<=PinA7)
 45c:	89 81       	ldd	r24, Y+1	; 0x01
 45e:	88 30       	cpi	r24, 0x08	; 8
 460:	a8 f4       	brcc	.+42     	; 0x48c <DIO_SetPinDirection+0x12e>
		{
			Clear_Bit(PORTA,PinNum);
 462:	ab e3       	ldi	r26, 0x3B	; 59
 464:	b0 e0       	ldi	r27, 0x00	; 0
 466:	eb e3       	ldi	r30, 0x3B	; 59
 468:	f0 e0       	ldi	r31, 0x00	; 0
 46a:	80 81       	ld	r24, Z
 46c:	48 2f       	mov	r20, r24
 46e:	89 81       	ldd	r24, Y+1	; 0x01
 470:	28 2f       	mov	r18, r24
 472:	30 e0       	ldi	r19, 0x00	; 0
 474:	81 e0       	ldi	r24, 0x01	; 1
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	02 2e       	mov	r0, r18
 47a:	02 c0       	rjmp	.+4      	; 0x480 <DIO_SetPinDirection+0x122>
 47c:	88 0f       	add	r24, r24
 47e:	99 1f       	adc	r25, r25
 480:	0a 94       	dec	r0
 482:	e2 f7       	brpl	.-8      	; 0x47c <DIO_SetPinDirection+0x11e>
 484:	80 95       	com	r24
 486:	84 23       	and	r24, r20
 488:	8c 93       	st	X, r24
 48a:	59 c0       	rjmp	.+178    	; 0x53e <DIO_SetPinDirection+0x1e0>
		}
		else if(PinNum>=PinB0&&PinNum<=PinB7)
 48c:	89 81       	ldd	r24, Y+1	; 0x01
 48e:	88 30       	cpi	r24, 0x08	; 8
 490:	d8 f0       	brcs	.+54     	; 0x4c8 <DIO_SetPinDirection+0x16a>
 492:	89 81       	ldd	r24, Y+1	; 0x01
 494:	80 31       	cpi	r24, 0x10	; 16
 496:	c0 f4       	brcc	.+48     	; 0x4c8 <DIO_SetPinDirection+0x16a>
		{
			Clear_Bit(DDRB,(PinNum-8));
 498:	a7 e3       	ldi	r26, 0x37	; 55
 49a:	b0 e0       	ldi	r27, 0x00	; 0
 49c:	e7 e3       	ldi	r30, 0x37	; 55
 49e:	f0 e0       	ldi	r31, 0x00	; 0
 4a0:	80 81       	ld	r24, Z
 4a2:	48 2f       	mov	r20, r24
 4a4:	89 81       	ldd	r24, Y+1	; 0x01
 4a6:	88 2f       	mov	r24, r24
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	9c 01       	movw	r18, r24
 4ac:	28 50       	subi	r18, 0x08	; 8
 4ae:	30 40       	sbci	r19, 0x00	; 0
 4b0:	81 e0       	ldi	r24, 0x01	; 1
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	02 2e       	mov	r0, r18
 4b6:	02 c0       	rjmp	.+4      	; 0x4bc <DIO_SetPinDirection+0x15e>
 4b8:	88 0f       	add	r24, r24
 4ba:	99 1f       	adc	r25, r25
 4bc:	0a 94       	dec	r0
 4be:	e2 f7       	brpl	.-8      	; 0x4b8 <DIO_SetPinDirection+0x15a>
 4c0:	80 95       	com	r24
 4c2:	84 23       	and	r24, r20
 4c4:	8c 93       	st	X, r24
 4c6:	3b c0       	rjmp	.+118    	; 0x53e <DIO_SetPinDirection+0x1e0>
		}
		else if(PinNum>=PinC0&&PinNum<=PinC7)
 4c8:	89 81       	ldd	r24, Y+1	; 0x01
 4ca:	80 31       	cpi	r24, 0x10	; 16
 4cc:	d8 f0       	brcs	.+54     	; 0x504 <DIO_SetPinDirection+0x1a6>
 4ce:	89 81       	ldd	r24, Y+1	; 0x01
 4d0:	88 31       	cpi	r24, 0x18	; 24
 4d2:	c0 f4       	brcc	.+48     	; 0x504 <DIO_SetPinDirection+0x1a6>
		{
			Clear_Bit(DDRC,(PinNum-16));
 4d4:	a4 e3       	ldi	r26, 0x34	; 52
 4d6:	b0 e0       	ldi	r27, 0x00	; 0
 4d8:	e4 e3       	ldi	r30, 0x34	; 52
 4da:	f0 e0       	ldi	r31, 0x00	; 0
 4dc:	80 81       	ld	r24, Z
 4de:	48 2f       	mov	r20, r24
 4e0:	89 81       	ldd	r24, Y+1	; 0x01
 4e2:	88 2f       	mov	r24, r24
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	9c 01       	movw	r18, r24
 4e8:	20 51       	subi	r18, 0x10	; 16
 4ea:	30 40       	sbci	r19, 0x00	; 0
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	02 2e       	mov	r0, r18
 4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <DIO_SetPinDirection+0x19a>
 4f4:	88 0f       	add	r24, r24
 4f6:	99 1f       	adc	r25, r25
 4f8:	0a 94       	dec	r0
 4fa:	e2 f7       	brpl	.-8      	; 0x4f4 <DIO_SetPinDirection+0x196>
 4fc:	80 95       	com	r24
 4fe:	84 23       	and	r24, r20
 500:	8c 93       	st	X, r24
 502:	1d c0       	rjmp	.+58     	; 0x53e <DIO_SetPinDirection+0x1e0>
		}
		else if(PinNum>=PinD0&&PinNum<=PinD7)
 504:	89 81       	ldd	r24, Y+1	; 0x01
 506:	88 31       	cpi	r24, 0x18	; 24
 508:	d0 f0       	brcs	.+52     	; 0x53e <DIO_SetPinDirection+0x1e0>
 50a:	89 81       	ldd	r24, Y+1	; 0x01
 50c:	80 32       	cpi	r24, 0x20	; 32
 50e:	b8 f4       	brcc	.+46     	; 0x53e <DIO_SetPinDirection+0x1e0>
		{
			Clear_Bit(DDRD,(PinNum-24));
 510:	a1 e3       	ldi	r26, 0x31	; 49
 512:	b0 e0       	ldi	r27, 0x00	; 0
 514:	e1 e3       	ldi	r30, 0x31	; 49
 516:	f0 e0       	ldi	r31, 0x00	; 0
 518:	80 81       	ld	r24, Z
 51a:	48 2f       	mov	r20, r24
 51c:	89 81       	ldd	r24, Y+1	; 0x01
 51e:	88 2f       	mov	r24, r24
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	9c 01       	movw	r18, r24
 524:	28 51       	subi	r18, 0x18	; 24
 526:	30 40       	sbci	r19, 0x00	; 0
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	02 2e       	mov	r0, r18
 52e:	02 c0       	rjmp	.+4      	; 0x534 <DIO_SetPinDirection+0x1d6>
 530:	88 0f       	add	r24, r24
 532:	99 1f       	adc	r25, r25
 534:	0a 94       	dec	r0
 536:	e2 f7       	brpl	.-8      	; 0x530 <DIO_SetPinDirection+0x1d2>
 538:	80 95       	com	r24
 53a:	84 23       	and	r24, r20
 53c:	8c 93       	st	X, r24
		}
	}
}
 53e:	0f 90       	pop	r0
 540:	0f 90       	pop	r0
 542:	cf 91       	pop	r28
 544:	df 91       	pop	r29
 546:	08 95       	ret

00000548 <OS_init>:
OS_Str_Tasks_Info_t Str_Array_Tasks[MAX_NUM_TASKS];
static uint8 u8_Tasks_Index=0u;
static uint8 u8_MAX_Priority=0u;
volatile static uint16 OS_TickCounter=0;
void OS_init(void)
{
 548:	df 93       	push	r29
 54a:	cf 93       	push	r28
 54c:	0f 92       	push	r0
 54e:	cd b7       	in	r28, 0x3d	; 61
 550:	de b7       	in	r29, 0x3e	; 62
	uint8 Array_Index;

	global_interrupt_enable();
 552:	0e 94 af 05 	call	0xb5e	; 0xb5e <global_interrupt_enable>
	timer0_init();
 556:	0e 94 0b 05 	call	0xa16	; 0xa16 <timer0_init>
	Set_OCR_Value(OS_TickTIme_ms);
 55a:	80 91 60 00 	lds	r24, 0x0060
 55e:	0e 94 26 05 	call	0xa4c	; 0xa4c <Set_OCR_Value>
	OS_SetCallBack(OS_Long_Term);
 562:	84 e4       	ldi	r24, 0x44	; 68
 564:	94 e0       	ldi	r25, 0x04	; 4
 566:	0e 94 12 06 	call	0xc24	; 0xc24 <OS_SetCallBack>
	for(Array_Index=0;Array_Index<MAX_NUM_TASKS;Array_Index++)
 56a:	19 82       	std	Y+1, r1	; 0x01
 56c:	3b c0       	rjmp	.+118    	; 0x5e4 <OS_init+0x9c>
	{
		Str_Array_Tasks[Array_Index].OS_PTR_Function=NULL;
 56e:	89 81       	ldd	r24, Y+1	; 0x01
 570:	88 2f       	mov	r24, r24
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	88 0f       	add	r24, r24
 576:	99 1f       	adc	r25, r25
 578:	88 0f       	add	r24, r24
 57a:	99 1f       	adc	r25, r25
 57c:	88 0f       	add	r24, r24
 57e:	99 1f       	adc	r25, r25
 580:	fc 01       	movw	r30, r24
 582:	e8 59       	subi	r30, 0x98	; 152
 584:	ff 4f       	sbci	r31, 0xFF	; 255
 586:	11 82       	std	Z+1, r1	; 0x01
 588:	10 82       	st	Z, r1
		Str_Array_Tasks[Array_Index].Task_Priority=0u;
 58a:	89 81       	ldd	r24, Y+1	; 0x01
 58c:	88 2f       	mov	r24, r24
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	88 0f       	add	r24, r24
 592:	99 1f       	adc	r25, r25
 594:	88 0f       	add	r24, r24
 596:	99 1f       	adc	r25, r25
 598:	88 0f       	add	r24, r24
 59a:	99 1f       	adc	r25, r25
 59c:	fc 01       	movw	r30, r24
 59e:	e3 59       	subi	r30, 0x93	; 147
 5a0:	ff 4f       	sbci	r31, 0xFF	; 255
 5a2:	10 82       	st	Z, r1
		Str_Array_Tasks[Array_Index].Task_Periodicity=0u;
 5a4:	89 81       	ldd	r24, Y+1	; 0x01
 5a6:	88 2f       	mov	r24, r24
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	88 0f       	add	r24, r24
 5ac:	99 1f       	adc	r25, r25
 5ae:	88 0f       	add	r24, r24
 5b0:	99 1f       	adc	r25, r25
 5b2:	88 0f       	add	r24, r24
 5b4:	99 1f       	adc	r25, r25
 5b6:	fc 01       	movw	r30, r24
 5b8:	e5 59       	subi	r30, 0x95	; 149
 5ba:	ff 4f       	sbci	r31, 0xFF	; 255
 5bc:	11 82       	std	Z+1, r1	; 0x01
 5be:	10 82       	st	Z, r1
		Str_Array_Tasks[Array_Index].Task_Status=WAITING;
 5c0:	89 81       	ldd	r24, Y+1	; 0x01
 5c2:	88 2f       	mov	r24, r24
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	88 0f       	add	r24, r24
 5c8:	99 1f       	adc	r25, r25
 5ca:	88 0f       	add	r24, r24
 5cc:	99 1f       	adc	r25, r25
 5ce:	01 96       	adiw	r24, 0x01	; 1
 5d0:	88 0f       	add	r24, r24
 5d2:	99 1f       	adc	r25, r25
 5d4:	fc 01       	movw	r30, r24
 5d6:	e8 59       	subi	r30, 0x98	; 152
 5d8:	ff 4f       	sbci	r31, 0xFF	; 255
 5da:	82 e0       	ldi	r24, 0x02	; 2
 5dc:	80 83       	st	Z, r24

	global_interrupt_enable();
	timer0_init();
	Set_OCR_Value(OS_TickTIme_ms);
	OS_SetCallBack(OS_Long_Term);
	for(Array_Index=0;Array_Index<MAX_NUM_TASKS;Array_Index++)
 5de:	89 81       	ldd	r24, Y+1	; 0x01
 5e0:	8f 5f       	subi	r24, 0xFF	; 255
 5e2:	89 83       	std	Y+1, r24	; 0x01
 5e4:	89 81       	ldd	r24, Y+1	; 0x01
 5e6:	8a 30       	cpi	r24, 0x0A	; 10
 5e8:	10 f2       	brcs	.-124    	; 0x56e <OS_init+0x26>
		Str_Array_Tasks[Array_Index].Task_Priority=0u;
		Str_Array_Tasks[Array_Index].Task_Periodicity=0u;
		Str_Array_Tasks[Array_Index].Task_Status=WAITING;

	}
}
 5ea:	0f 90       	pop	r0
 5ec:	cf 91       	pop	r28
 5ee:	df 91       	pop	r29
 5f0:	08 95       	ret

000005f2 <Create_Task>:
OS_Status_t Create_Task(OS_PTR_Function OS_PTR_Function,uint8 Task_Priority,uint16 Task_Periodicity,uint16 Task_Temp_Periodicity)
{
 5f2:	df 93       	push	r29
 5f4:	cf 93       	push	r28
 5f6:	cd b7       	in	r28, 0x3d	; 61
 5f8:	de b7       	in	r29, 0x3e	; 62
 5fa:	28 97       	sbiw	r28, 0x08	; 8
 5fc:	0f b6       	in	r0, 0x3f	; 63
 5fe:	f8 94       	cli
 600:	de bf       	out	0x3e, r29	; 62
 602:	0f be       	out	0x3f, r0	; 63
 604:	cd bf       	out	0x3d, r28	; 61
 606:	9b 83       	std	Y+3, r25	; 0x03
 608:	8a 83       	std	Y+2, r24	; 0x02
 60a:	6c 83       	std	Y+4, r22	; 0x04
 60c:	5e 83       	std	Y+6, r21	; 0x06
 60e:	4d 83       	std	Y+5, r20	; 0x05
 610:	38 87       	std	Y+8, r19	; 0x08
 612:	2f 83       	std	Y+7, r18	; 0x07
	OS_Status_t Ret_Value;
	/*Check for first Null*/
	if(u8_Tasks_Index<MAX_NUM_TASKS)
 614:	80 91 62 00 	lds	r24, 0x0062
 618:	8a 30       	cpi	r24, 0x0A	; 10
 61a:	08 f0       	brcs	.+2      	; 0x61e <Create_Task+0x2c>
 61c:	59 c0       	rjmp	.+178    	; 0x6d0 <Create_Task+0xde>
	{
		Str_Array_Tasks[u8_Tasks_Index].OS_PTR_Function = OS_PTR_Function;
 61e:	80 91 62 00 	lds	r24, 0x0062
 622:	88 2f       	mov	r24, r24
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	88 0f       	add	r24, r24
 628:	99 1f       	adc	r25, r25
 62a:	88 0f       	add	r24, r24
 62c:	99 1f       	adc	r25, r25
 62e:	88 0f       	add	r24, r24
 630:	99 1f       	adc	r25, r25
 632:	fc 01       	movw	r30, r24
 634:	e8 59       	subi	r30, 0x98	; 152
 636:	ff 4f       	sbci	r31, 0xFF	; 255
 638:	8a 81       	ldd	r24, Y+2	; 0x02
 63a:	9b 81       	ldd	r25, Y+3	; 0x03
 63c:	91 83       	std	Z+1, r25	; 0x01
 63e:	80 83       	st	Z, r24
		Str_Array_Tasks[u8_Tasks_Index].Task_Priority = Task_Priority;
 640:	80 91 62 00 	lds	r24, 0x0062
 644:	88 2f       	mov	r24, r24
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	88 0f       	add	r24, r24
 64a:	99 1f       	adc	r25, r25
 64c:	88 0f       	add	r24, r24
 64e:	99 1f       	adc	r25, r25
 650:	88 0f       	add	r24, r24
 652:	99 1f       	adc	r25, r25
 654:	fc 01       	movw	r30, r24
 656:	e3 59       	subi	r30, 0x93	; 147
 658:	ff 4f       	sbci	r31, 0xFF	; 255
 65a:	8c 81       	ldd	r24, Y+4	; 0x04
 65c:	80 83       	st	Z, r24
		Str_Array_Tasks[u8_Tasks_Index].Task_Periodicity = Task_Periodicity;
 65e:	80 91 62 00 	lds	r24, 0x0062
 662:	88 2f       	mov	r24, r24
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	88 0f       	add	r24, r24
 668:	99 1f       	adc	r25, r25
 66a:	88 0f       	add	r24, r24
 66c:	99 1f       	adc	r25, r25
 66e:	88 0f       	add	r24, r24
 670:	99 1f       	adc	r25, r25
 672:	fc 01       	movw	r30, r24
 674:	e5 59       	subi	r30, 0x95	; 149
 676:	ff 4f       	sbci	r31, 0xFF	; 255
 678:	8d 81       	ldd	r24, Y+5	; 0x05
 67a:	9e 81       	ldd	r25, Y+6	; 0x06
 67c:	91 83       	std	Z+1, r25	; 0x01
 67e:	80 83       	st	Z, r24
		Str_Array_Tasks[u8_Tasks_Index].Task_Status = WAITING;
 680:	80 91 62 00 	lds	r24, 0x0062
 684:	88 2f       	mov	r24, r24
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	88 0f       	add	r24, r24
 68a:	99 1f       	adc	r25, r25
 68c:	88 0f       	add	r24, r24
 68e:	99 1f       	adc	r25, r25
 690:	01 96       	adiw	r24, 0x01	; 1
 692:	88 0f       	add	r24, r24
 694:	99 1f       	adc	r25, r25
 696:	fc 01       	movw	r30, r24
 698:	e8 59       	subi	r30, 0x98	; 152
 69a:	ff 4f       	sbci	r31, 0xFF	; 255
 69c:	82 e0       	ldi	r24, 0x02	; 2
 69e:	80 83       	st	Z, r24
		Str_Array_Tasks[u8_Tasks_Index].Task_Temp_Periodicity=Task_Temp_Periodicity;
 6a0:	80 91 62 00 	lds	r24, 0x0062
 6a4:	88 2f       	mov	r24, r24
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	88 0f       	add	r24, r24
 6aa:	99 1f       	adc	r25, r25
 6ac:	88 0f       	add	r24, r24
 6ae:	99 1f       	adc	r25, r25
 6b0:	88 0f       	add	r24, r24
 6b2:	99 1f       	adc	r25, r25
 6b4:	fc 01       	movw	r30, r24
 6b6:	e2 59       	subi	r30, 0x92	; 146
 6b8:	ff 4f       	sbci	r31, 0xFF	; 255
 6ba:	8f 81       	ldd	r24, Y+7	; 0x07
 6bc:	98 85       	ldd	r25, Y+8	; 0x08
 6be:	91 83       	std	Z+1, r25	; 0x01
 6c0:	80 83       	st	Z, r24
		u8_Tasks_Index++;
 6c2:	80 91 62 00 	lds	r24, 0x0062
 6c6:	8f 5f       	subi	r24, 0xFF	; 255
 6c8:	80 93 62 00 	sts	0x0062, r24
		Ret_Value=OS_OK;
 6cc:	19 82       	std	Y+1, r1	; 0x01
 6ce:	02 c0       	rjmp	.+4      	; 0x6d4 <Create_Task+0xe2>
	}
	else
	{
		Ret_Value=OS_NOT_OK;
 6d0:	81 e0       	ldi	r24, 0x01	; 1
 6d2:	89 83       	std	Y+1, r24	; 0x01
	}
	return Ret_Value;
 6d4:	89 81       	ldd	r24, Y+1	; 0x01
}
 6d6:	28 96       	adiw	r28, 0x08	; 8
 6d8:	0f b6       	in	r0, 0x3f	; 63
 6da:	f8 94       	cli
 6dc:	de bf       	out	0x3e, r29	; 62
 6de:	0f be       	out	0x3f, r0	; 63
 6e0:	cd bf       	out	0x3d, r28	; 61
 6e2:	cf 91       	pop	r28
 6e4:	df 91       	pop	r29
 6e6:	08 95       	ret

000006e8 <Delete_Task>:
OS_Status_t Delete_Task(OS_PTR_Function OS_PTR_Function)
{
 6e8:	df 93       	push	r29
 6ea:	cf 93       	push	r28
 6ec:	00 d0       	rcall	.+0      	; 0x6ee <Delete_Task+0x6>
 6ee:	00 d0       	rcall	.+0      	; 0x6f0 <Delete_Task+0x8>
 6f0:	cd b7       	in	r28, 0x3d	; 61
 6f2:	de b7       	in	r29, 0x3e	; 62
 6f4:	9c 83       	std	Y+4, r25	; 0x04
 6f6:	8b 83       	std	Y+3, r24	; 0x03
	uint8 Array_Index;
	OS_Status_t Ret_Value=OS_NOT_OK;
 6f8:	81 e0       	ldi	r24, 0x01	; 1
 6fa:	89 83       	std	Y+1, r24	; 0x01
	for(Array_Index=0;Array_Index<u8_Tasks_Index;Array_Index++)
 6fc:	1a 82       	std	Y+2, r1	; 0x02
 6fe:	5e c0       	rjmp	.+188    	; 0x7bc <Delete_Task+0xd4>
	{
		if(Str_Array_Tasks[Array_Index].OS_PTR_Function==OS_PTR_Function)
 700:	8a 81       	ldd	r24, Y+2	; 0x02
 702:	88 2f       	mov	r24, r24
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	88 0f       	add	r24, r24
 708:	99 1f       	adc	r25, r25
 70a:	88 0f       	add	r24, r24
 70c:	99 1f       	adc	r25, r25
 70e:	88 0f       	add	r24, r24
 710:	99 1f       	adc	r25, r25
 712:	fc 01       	movw	r30, r24
 714:	e8 59       	subi	r30, 0x98	; 152
 716:	ff 4f       	sbci	r31, 0xFF	; 255
 718:	20 81       	ld	r18, Z
 71a:	31 81       	ldd	r19, Z+1	; 0x01
 71c:	8b 81       	ldd	r24, Y+3	; 0x03
 71e:	9c 81       	ldd	r25, Y+4	; 0x04
 720:	28 17       	cp	r18, r24
 722:	39 07       	cpc	r19, r25
 724:	09 f0       	breq	.+2      	; 0x728 <Delete_Task+0x40>
 726:	47 c0       	rjmp	.+142    	; 0x7b6 <Delete_Task+0xce>
		{
			Str_Array_Tasks[Array_Index].OS_PTR_Function=NULL;
 728:	8a 81       	ldd	r24, Y+2	; 0x02
 72a:	88 2f       	mov	r24, r24
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	88 0f       	add	r24, r24
 730:	99 1f       	adc	r25, r25
 732:	88 0f       	add	r24, r24
 734:	99 1f       	adc	r25, r25
 736:	88 0f       	add	r24, r24
 738:	99 1f       	adc	r25, r25
 73a:	fc 01       	movw	r30, r24
 73c:	e8 59       	subi	r30, 0x98	; 152
 73e:	ff 4f       	sbci	r31, 0xFF	; 255
 740:	11 82       	std	Z+1, r1	; 0x01
 742:	10 82       	st	Z, r1
			Str_Array_Tasks[Array_Index].Task_Priority=0u;
 744:	8a 81       	ldd	r24, Y+2	; 0x02
 746:	88 2f       	mov	r24, r24
 748:	90 e0       	ldi	r25, 0x00	; 0
 74a:	88 0f       	add	r24, r24
 74c:	99 1f       	adc	r25, r25
 74e:	88 0f       	add	r24, r24
 750:	99 1f       	adc	r25, r25
 752:	88 0f       	add	r24, r24
 754:	99 1f       	adc	r25, r25
 756:	fc 01       	movw	r30, r24
 758:	e3 59       	subi	r30, 0x93	; 147
 75a:	ff 4f       	sbci	r31, 0xFF	; 255
 75c:	10 82       	st	Z, r1
			Str_Array_Tasks[Array_Index].Task_Periodicity=0u;
 75e:	8a 81       	ldd	r24, Y+2	; 0x02
 760:	88 2f       	mov	r24, r24
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	88 0f       	add	r24, r24
 766:	99 1f       	adc	r25, r25
 768:	88 0f       	add	r24, r24
 76a:	99 1f       	adc	r25, r25
 76c:	88 0f       	add	r24, r24
 76e:	99 1f       	adc	r25, r25
 770:	fc 01       	movw	r30, r24
 772:	e5 59       	subi	r30, 0x95	; 149
 774:	ff 4f       	sbci	r31, 0xFF	; 255
 776:	11 82       	std	Z+1, r1	; 0x01
 778:	10 82       	st	Z, r1
			Str_Array_Tasks[Array_Index].Task_Status=DELETED;
 77a:	8a 81       	ldd	r24, Y+2	; 0x02
 77c:	88 2f       	mov	r24, r24
 77e:	90 e0       	ldi	r25, 0x00	; 0
 780:	88 0f       	add	r24, r24
 782:	99 1f       	adc	r25, r25
 784:	88 0f       	add	r24, r24
 786:	99 1f       	adc	r25, r25
 788:	01 96       	adiw	r24, 0x01	; 1
 78a:	88 0f       	add	r24, r24
 78c:	99 1f       	adc	r25, r25
 78e:	fc 01       	movw	r30, r24
 790:	e8 59       	subi	r30, 0x98	; 152
 792:	ff 4f       	sbci	r31, 0xFF	; 255
 794:	83 e0       	ldi	r24, 0x03	; 3
 796:	80 83       	st	Z, r24
			Str_Array_Tasks[Array_Index].Task_Temp_Periodicity=0u;
 798:	8a 81       	ldd	r24, Y+2	; 0x02
 79a:	88 2f       	mov	r24, r24
 79c:	90 e0       	ldi	r25, 0x00	; 0
 79e:	88 0f       	add	r24, r24
 7a0:	99 1f       	adc	r25, r25
 7a2:	88 0f       	add	r24, r24
 7a4:	99 1f       	adc	r25, r25
 7a6:	88 0f       	add	r24, r24
 7a8:	99 1f       	adc	r25, r25
 7aa:	fc 01       	movw	r30, r24
 7ac:	e2 59       	subi	r30, 0x92	; 146
 7ae:	ff 4f       	sbci	r31, 0xFF	; 255
 7b0:	11 82       	std	Z+1, r1	; 0x01
 7b2:	10 82       	st	Z, r1


			Ret_Value=OS_OK;
 7b4:	19 82       	std	Y+1, r1	; 0x01
}
OS_Status_t Delete_Task(OS_PTR_Function OS_PTR_Function)
{
	uint8 Array_Index;
	OS_Status_t Ret_Value=OS_NOT_OK;
	for(Array_Index=0;Array_Index<u8_Tasks_Index;Array_Index++)
 7b6:	8a 81       	ldd	r24, Y+2	; 0x02
 7b8:	8f 5f       	subi	r24, 0xFF	; 255
 7ba:	8a 83       	std	Y+2, r24	; 0x02
 7bc:	90 91 62 00 	lds	r25, 0x0062
 7c0:	8a 81       	ldd	r24, Y+2	; 0x02
 7c2:	89 17       	cp	r24, r25
 7c4:	08 f4       	brcc	.+2      	; 0x7c8 <Delete_Task+0xe0>
 7c6:	9c cf       	rjmp	.-200    	; 0x700 <Delete_Task+0x18>


			Ret_Value=OS_OK;
		}
	}
	return Ret_Value;
 7c8:	89 81       	ldd	r24, Y+1	; 0x01
}
 7ca:	0f 90       	pop	r0
 7cc:	0f 90       	pop	r0
 7ce:	0f 90       	pop	r0
 7d0:	0f 90       	pop	r0
 7d2:	cf 91       	pop	r28
 7d4:	df 91       	pop	r29
 7d6:	08 95       	ret

000007d8 <OS_Run>:
extern void OS_Run(void)
{
 7d8:	df 93       	push	r29
 7da:	cf 93       	push	r28
 7dc:	00 d0       	rcall	.+0      	; 0x7de <OS_Run+0x6>
 7de:	cd b7       	in	r28, 0x3d	; 61
 7e0:	de b7       	in	r29, 0x3e	; 62
	uint8 Array_Index;
	uint8 Priority_Index;
	while(1)
	{
		for(Array_Index = 0 ;Array_Index < u8_Tasks_Index ; Array_Index++)
 7e2:	1a 82       	std	Y+2, r1	; 0x02
 7e4:	4a c0       	rjmp	.+148    	; 0x87a <__stack+0x1b>
		{
			if( Str_Array_Tasks[Array_Index].Task_Status == READY)
 7e6:	8a 81       	ldd	r24, Y+2	; 0x02
 7e8:	88 2f       	mov	r24, r24
 7ea:	90 e0       	ldi	r25, 0x00	; 0
 7ec:	88 0f       	add	r24, r24
 7ee:	99 1f       	adc	r25, r25
 7f0:	88 0f       	add	r24, r24
 7f2:	99 1f       	adc	r25, r25
 7f4:	01 96       	adiw	r24, 0x01	; 1
 7f6:	88 0f       	add	r24, r24
 7f8:	99 1f       	adc	r25, r25
 7fa:	fc 01       	movw	r30, r24
 7fc:	e8 59       	subi	r30, 0x98	; 152
 7fe:	ff 4f       	sbci	r31, 0xFF	; 255
 800:	80 81       	ld	r24, Z
 802:	88 23       	and	r24, r24
 804:	b9 f5       	brne	.+110    	; 0x874 <__stack+0x15>
			{
				for(Priority_Index = 0 ; Priority_Index <= MAX_NUM_TASKS ; Priority_Index++)
 806:	19 82       	std	Y+1, r1	; 0x01
 808:	32 c0       	rjmp	.+100    	; 0x86e <__stack+0xf>
				{
					if( Str_Array_Tasks[Array_Index].Task_Priority == Priority_Index )
 80a:	8a 81       	ldd	r24, Y+2	; 0x02
 80c:	88 2f       	mov	r24, r24
 80e:	90 e0       	ldi	r25, 0x00	; 0
 810:	88 0f       	add	r24, r24
 812:	99 1f       	adc	r25, r25
 814:	88 0f       	add	r24, r24
 816:	99 1f       	adc	r25, r25
 818:	88 0f       	add	r24, r24
 81a:	99 1f       	adc	r25, r25
 81c:	fc 01       	movw	r30, r24
 81e:	e3 59       	subi	r30, 0x93	; 147
 820:	ff 4f       	sbci	r31, 0xFF	; 255
 822:	90 81       	ld	r25, Z
 824:	89 81       	ldd	r24, Y+1	; 0x01
 826:	98 17       	cp	r25, r24
 828:	f9 f4       	brne	.+62     	; 0x868 <__stack+0x9>
					{
						Str_Array_Tasks[Array_Index].Task_Status = RUNNING;
 82a:	8a 81       	ldd	r24, Y+2	; 0x02
 82c:	88 2f       	mov	r24, r24
 82e:	90 e0       	ldi	r25, 0x00	; 0
 830:	88 0f       	add	r24, r24
 832:	99 1f       	adc	r25, r25
 834:	88 0f       	add	r24, r24
 836:	99 1f       	adc	r25, r25
 838:	01 96       	adiw	r24, 0x01	; 1
 83a:	88 0f       	add	r24, r24
 83c:	99 1f       	adc	r25, r25
 83e:	fc 01       	movw	r30, r24
 840:	e8 59       	subi	r30, 0x98	; 152
 842:	ff 4f       	sbci	r31, 0xFF	; 255
 844:	81 e0       	ldi	r24, 0x01	; 1
 846:	80 83       	st	Z, r24
						Str_Array_Tasks[Array_Index].OS_PTR_Function();
 848:	8a 81       	ldd	r24, Y+2	; 0x02
 84a:	88 2f       	mov	r24, r24
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	88 0f       	add	r24, r24
 850:	99 1f       	adc	r25, r25
 852:	88 0f       	add	r24, r24
 854:	99 1f       	adc	r25, r25
 856:	88 0f       	add	r24, r24
 858:	99 1f       	adc	r25, r25
 85a:	fc 01       	movw	r30, r24
 85c:	e8 59       	subi	r30, 0x98	; 152
 85e:	ff 4f       	sbci	r31, 0xFF	; 255
 860:	01 90       	ld	r0, Z+
 862:	f0 81       	ld	r31, Z
 864:	e0 2d       	mov	r30, r0
 866:	09 95       	icall
	{
		for(Array_Index = 0 ;Array_Index < u8_Tasks_Index ; Array_Index++)
		{
			if( Str_Array_Tasks[Array_Index].Task_Status == READY)
			{
				for(Priority_Index = 0 ; Priority_Index <= MAX_NUM_TASKS ; Priority_Index++)
 868:	89 81       	ldd	r24, Y+1	; 0x01
 86a:	8f 5f       	subi	r24, 0xFF	; 255
 86c:	89 83       	std	Y+1, r24	; 0x01
 86e:	89 81       	ldd	r24, Y+1	; 0x01
 870:	8b 30       	cpi	r24, 0x0B	; 11
 872:	58 f2       	brcs	.-106    	; 0x80a <OS_Run+0x32>
{
	uint8 Array_Index;
	uint8 Priority_Index;
	while(1)
	{
		for(Array_Index = 0 ;Array_Index < u8_Tasks_Index ; Array_Index++)
 874:	8a 81       	ldd	r24, Y+2	; 0x02
 876:	8f 5f       	subi	r24, 0xFF	; 255
 878:	8a 83       	std	Y+2, r24	; 0x02
 87a:	90 91 62 00 	lds	r25, 0x0062
 87e:	8a 81       	ldd	r24, Y+2	; 0x02
 880:	89 17       	cp	r24, r25
 882:	08 f4       	brcc	.+2      	; 0x886 <__stack+0x27>
 884:	b0 cf       	rjmp	.-160    	; 0x7e6 <OS_Run+0xe>
 886:	ad cf       	rjmp	.-166    	; 0x7e2 <OS_Run+0xa>

00000888 <OS_Long_Term>:
			}
		}
	}
}
void OS_Long_Term(void)
{
 888:	df 93       	push	r29
 88a:	cf 93       	push	r28
 88c:	0f 92       	push	r0
 88e:	cd b7       	in	r28, 0x3d	; 61
 890:	de b7       	in	r29, 0x3e	; 62
	uint8 Array_Index;
	for(Array_Index = 0 ;Array_Index < u8_Tasks_Index ; Array_Index++)
 892:	19 82       	std	Y+1, r1	; 0x01
 894:	7a c0       	rjmp	.+244    	; 0x98a <OS_Long_Term+0x102>
	{
		if( Str_Array_Tasks[Array_Index].Task_Temp_Periodicity == OS_TickCounter )
 896:	89 81       	ldd	r24, Y+1	; 0x01
 898:	88 2f       	mov	r24, r24
 89a:	90 e0       	ldi	r25, 0x00	; 0
 89c:	88 0f       	add	r24, r24
 89e:	99 1f       	adc	r25, r25
 8a0:	88 0f       	add	r24, r24
 8a2:	99 1f       	adc	r25, r25
 8a4:	88 0f       	add	r24, r24
 8a6:	99 1f       	adc	r25, r25
 8a8:	fc 01       	movw	r30, r24
 8aa:	e2 59       	subi	r30, 0x92	; 146
 8ac:	ff 4f       	sbci	r31, 0xFF	; 255
 8ae:	20 81       	ld	r18, Z
 8b0:	31 81       	ldd	r19, Z+1	; 0x01
 8b2:	80 91 64 00 	lds	r24, 0x0064
 8b6:	90 91 65 00 	lds	r25, 0x0065
 8ba:	28 17       	cp	r18, r24
 8bc:	39 07       	cpc	r19, r25
 8be:	09 f0       	breq	.+2      	; 0x8c2 <OS_Long_Term+0x3a>
 8c0:	52 c0       	rjmp	.+164    	; 0x966 <OS_Long_Term+0xde>
		{
			Str_Array_Tasks[Array_Index].Task_Temp_Periodicity = Str_Array_Tasks[Array_Index].Task_Periodicity + OS_TickCounter ;
 8c2:	89 81       	ldd	r24, Y+1	; 0x01
 8c4:	48 2f       	mov	r20, r24
 8c6:	50 e0       	ldi	r21, 0x00	; 0
 8c8:	89 81       	ldd	r24, Y+1	; 0x01
 8ca:	88 2f       	mov	r24, r24
 8cc:	90 e0       	ldi	r25, 0x00	; 0
 8ce:	88 0f       	add	r24, r24
 8d0:	99 1f       	adc	r25, r25
 8d2:	88 0f       	add	r24, r24
 8d4:	99 1f       	adc	r25, r25
 8d6:	88 0f       	add	r24, r24
 8d8:	99 1f       	adc	r25, r25
 8da:	fc 01       	movw	r30, r24
 8dc:	e5 59       	subi	r30, 0x95	; 149
 8de:	ff 4f       	sbci	r31, 0xFF	; 255
 8e0:	20 81       	ld	r18, Z
 8e2:	31 81       	ldd	r19, Z+1	; 0x01
 8e4:	80 91 64 00 	lds	r24, 0x0064
 8e8:	90 91 65 00 	lds	r25, 0x0065
 8ec:	28 0f       	add	r18, r24
 8ee:	39 1f       	adc	r19, r25
 8f0:	ca 01       	movw	r24, r20
 8f2:	88 0f       	add	r24, r24
 8f4:	99 1f       	adc	r25, r25
 8f6:	88 0f       	add	r24, r24
 8f8:	99 1f       	adc	r25, r25
 8fa:	88 0f       	add	r24, r24
 8fc:	99 1f       	adc	r25, r25
 8fe:	fc 01       	movw	r30, r24
 900:	e2 59       	subi	r30, 0x92	; 146
 902:	ff 4f       	sbci	r31, 0xFF	; 255
 904:	31 83       	std	Z+1, r19	; 0x01
 906:	20 83       	st	Z, r18
			Str_Array_Tasks[Array_Index].Task_Status = READY;
 908:	89 81       	ldd	r24, Y+1	; 0x01
 90a:	88 2f       	mov	r24, r24
 90c:	90 e0       	ldi	r25, 0x00	; 0
 90e:	88 0f       	add	r24, r24
 910:	99 1f       	adc	r25, r25
 912:	88 0f       	add	r24, r24
 914:	99 1f       	adc	r25, r25
 916:	01 96       	adiw	r24, 0x01	; 1
 918:	88 0f       	add	r24, r24
 91a:	99 1f       	adc	r25, r25
 91c:	fc 01       	movw	r30, r24
 91e:	e8 59       	subi	r30, 0x98	; 152
 920:	ff 4f       	sbci	r31, 0xFF	; 255
 922:	10 82       	st	Z, r1
			if( u8_MAX_Priority < Str_Array_Tasks[Array_Index].Task_Priority )
 924:	89 81       	ldd	r24, Y+1	; 0x01
 926:	88 2f       	mov	r24, r24
 928:	90 e0       	ldi	r25, 0x00	; 0
 92a:	88 0f       	add	r24, r24
 92c:	99 1f       	adc	r25, r25
 92e:	88 0f       	add	r24, r24
 930:	99 1f       	adc	r25, r25
 932:	88 0f       	add	r24, r24
 934:	99 1f       	adc	r25, r25
 936:	fc 01       	movw	r30, r24
 938:	e3 59       	subi	r30, 0x93	; 147
 93a:	ff 4f       	sbci	r31, 0xFF	; 255
 93c:	90 81       	ld	r25, Z
 93e:	80 91 63 00 	lds	r24, 0x0063
 942:	89 17       	cp	r24, r25
 944:	f8 f4       	brcc	.+62     	; 0x984 <OS_Long_Term+0xfc>
			{
				u8_MAX_Priority = Str_Array_Tasks[Array_Index].Task_Priority;
 946:	89 81       	ldd	r24, Y+1	; 0x01
 948:	88 2f       	mov	r24, r24
 94a:	90 e0       	ldi	r25, 0x00	; 0
 94c:	88 0f       	add	r24, r24
 94e:	99 1f       	adc	r25, r25
 950:	88 0f       	add	r24, r24
 952:	99 1f       	adc	r25, r25
 954:	88 0f       	add	r24, r24
 956:	99 1f       	adc	r25, r25
 958:	fc 01       	movw	r30, r24
 95a:	e3 59       	subi	r30, 0x93	; 147
 95c:	ff 4f       	sbci	r31, 0xFF	; 255
 95e:	80 81       	ld	r24, Z
 960:	80 93 63 00 	sts	0x0063, r24
 964:	0f c0       	rjmp	.+30     	; 0x984 <OS_Long_Term+0xfc>
			}
		}
		else
		{
			Str_Array_Tasks[Array_Index].Task_Status = WAITING;
 966:	89 81       	ldd	r24, Y+1	; 0x01
 968:	88 2f       	mov	r24, r24
 96a:	90 e0       	ldi	r25, 0x00	; 0
 96c:	88 0f       	add	r24, r24
 96e:	99 1f       	adc	r25, r25
 970:	88 0f       	add	r24, r24
 972:	99 1f       	adc	r25, r25
 974:	01 96       	adiw	r24, 0x01	; 1
 976:	88 0f       	add	r24, r24
 978:	99 1f       	adc	r25, r25
 97a:	fc 01       	movw	r30, r24
 97c:	e8 59       	subi	r30, 0x98	; 152
 97e:	ff 4f       	sbci	r31, 0xFF	; 255
 980:	82 e0       	ldi	r24, 0x02	; 2
 982:	80 83       	st	Z, r24
	}
}
void OS_Long_Term(void)
{
	uint8 Array_Index;
	for(Array_Index = 0 ;Array_Index < u8_Tasks_Index ; Array_Index++)
 984:	89 81       	ldd	r24, Y+1	; 0x01
 986:	8f 5f       	subi	r24, 0xFF	; 255
 988:	89 83       	std	Y+1, r24	; 0x01
 98a:	90 91 62 00 	lds	r25, 0x0062
 98e:	89 81       	ldd	r24, Y+1	; 0x01
 990:	89 17       	cp	r24, r25
 992:	08 f4       	brcc	.+2      	; 0x996 <OS_Long_Term+0x10e>
 994:	80 cf       	rjmp	.-256    	; 0x896 <OS_Long_Term+0xe>
		{
			Str_Array_Tasks[Array_Index].Task_Status = WAITING;
		}

	}
	OS_TickCounter++;
 996:	80 91 64 00 	lds	r24, 0x0064
 99a:	90 91 65 00 	lds	r25, 0x0065
 99e:	01 96       	adiw	r24, 0x01	; 1
 9a0:	90 93 65 00 	sts	0x0065, r25
 9a4:	80 93 64 00 	sts	0x0064, r24
}
 9a8:	0f 90       	pop	r0
 9aa:	cf 91       	pop	r28
 9ac:	df 91       	pop	r29
 9ae:	08 95       	ret

000009b0 <__vector_10>:
#include "avr/interrupt.h"

static void (*OS_CallBackPtr_g)(void) = NULL;

ISR(TIMER0_COMP_vect)
{
 9b0:	1f 92       	push	r1
 9b2:	0f 92       	push	r0
 9b4:	0f b6       	in	r0, 0x3f	; 63
 9b6:	0f 92       	push	r0
 9b8:	11 24       	eor	r1, r1
 9ba:	2f 93       	push	r18
 9bc:	3f 93       	push	r19
 9be:	4f 93       	push	r20
 9c0:	5f 93       	push	r21
 9c2:	6f 93       	push	r22
 9c4:	7f 93       	push	r23
 9c6:	8f 93       	push	r24
 9c8:	9f 93       	push	r25
 9ca:	af 93       	push	r26
 9cc:	bf 93       	push	r27
 9ce:	ef 93       	push	r30
 9d0:	ff 93       	push	r31
 9d2:	df 93       	push	r29
 9d4:	cf 93       	push	r28
 9d6:	cd b7       	in	r28, 0x3d	; 61
 9d8:	de b7       	in	r29, 0x3e	; 62
	if(OS_CallBackPtr_g != NULL)
 9da:	80 91 66 00 	lds	r24, 0x0066
 9de:	90 91 67 00 	lds	r25, 0x0067
 9e2:	00 97       	sbiw	r24, 0x00	; 0
 9e4:	29 f0       	breq	.+10     	; 0x9f0 <__vector_10+0x40>
	{
		OS_CallBackPtr_g();
 9e6:	e0 91 66 00 	lds	r30, 0x0066
 9ea:	f0 91 67 00 	lds	r31, 0x0067
 9ee:	09 95       	icall
	}
}
 9f0:	cf 91       	pop	r28
 9f2:	df 91       	pop	r29
 9f4:	ff 91       	pop	r31
 9f6:	ef 91       	pop	r30
 9f8:	bf 91       	pop	r27
 9fa:	af 91       	pop	r26
 9fc:	9f 91       	pop	r25
 9fe:	8f 91       	pop	r24
 a00:	7f 91       	pop	r23
 a02:	6f 91       	pop	r22
 a04:	5f 91       	pop	r21
 a06:	4f 91       	pop	r20
 a08:	3f 91       	pop	r19
 a0a:	2f 91       	pop	r18
 a0c:	0f 90       	pop	r0
 a0e:	0f be       	out	0x3f, r0	; 63
 a10:	0f 90       	pop	r0
 a12:	1f 90       	pop	r1
 a14:	18 95       	reti

00000a16 <timer0_init>:
void timer0_init(void)
{
 a16:	df 93       	push	r29
 a18:	cf 93       	push	r28
 a1a:	cd b7       	in	r28, 0x3d	; 61
 a1c:	de b7       	in	r29, 0x3e	; 62
	TCCR0=0;
 a1e:	e3 e5       	ldi	r30, 0x53	; 83
 a20:	f0 e0       	ldi	r31, 0x00	; 0
 a22:	10 82       	st	Z, r1
	TCNT0=0;
 a24:	e2 e5       	ldi	r30, 0x52	; 82
 a26:	f0 e0       	ldi	r31, 0x00	; 0
 a28:	10 82       	st	Z, r1
	//TCCR0|=(T0_config->PRE_SCALER)|(T0_config->Wave_generation_mode);
	Set_Bit(TIMSK,OCIE0);
 a2a:	a9 e5       	ldi	r26, 0x59	; 89
 a2c:	b0 e0       	ldi	r27, 0x00	; 0
 a2e:	e9 e5       	ldi	r30, 0x59	; 89
 a30:	f0 e0       	ldi	r31, 0x00	; 0
 a32:	80 81       	ld	r24, Z
 a34:	82 60       	ori	r24, 0x02	; 2
 a36:	8c 93       	st	X, r24
	TCCR0|=(N_256)|(CTC_Normal);
 a38:	a3 e5       	ldi	r26, 0x53	; 83
 a3a:	b0 e0       	ldi	r27, 0x00	; 0
 a3c:	e3 e5       	ldi	r30, 0x53	; 83
 a3e:	f0 e0       	ldi	r31, 0x00	; 0
 a40:	80 81       	ld	r24, Z
 a42:	8c 60       	ori	r24, 0x0C	; 12
 a44:	8c 93       	st	X, r24
}
 a46:	cf 91       	pop	r28
 a48:	df 91       	pop	r29
 a4a:	08 95       	ret

00000a4c <Set_OCR_Value>:
void Set_OCR_Value(uint8 Tick_Time_ms)
{
 a4c:	df 93       	push	r29
 a4e:	cf 93       	push	r28
 a50:	00 d0       	rcall	.+0      	; 0xa52 <Set_OCR_Value+0x6>
 a52:	0f 92       	push	r0
 a54:	cd b7       	in	r28, 0x3d	; 61
 a56:	de b7       	in	r29, 0x3e	; 62
 a58:	89 83       	std	Y+1, r24	; 0x01
	switch(Tick_Time_ms)
 a5a:	89 81       	ldd	r24, Y+1	; 0x01
 a5c:	28 2f       	mov	r18, r24
 a5e:	30 e0       	ldi	r19, 0x00	; 0
 a60:	3b 83       	std	Y+3, r19	; 0x03
 a62:	2a 83       	std	Y+2, r18	; 0x02
 a64:	8a 81       	ldd	r24, Y+2	; 0x02
 a66:	9b 81       	ldd	r25, Y+3	; 0x03
 a68:	84 30       	cpi	r24, 0x04	; 4
 a6a:	91 05       	cpc	r25, r1
 a6c:	c9 f1       	breq	.+114    	; 0xae0 <Set_OCR_Value+0x94>
 a6e:	2a 81       	ldd	r18, Y+2	; 0x02
 a70:	3b 81       	ldd	r19, Y+3	; 0x03
 a72:	25 30       	cpi	r18, 0x05	; 5
 a74:	31 05       	cpc	r19, r1
 a76:	84 f4       	brge	.+32     	; 0xa98 <Set_OCR_Value+0x4c>
 a78:	8a 81       	ldd	r24, Y+2	; 0x02
 a7a:	9b 81       	ldd	r25, Y+3	; 0x03
 a7c:	82 30       	cpi	r24, 0x02	; 2
 a7e:	91 05       	cpc	r25, r1
 a80:	29 f1       	breq	.+74     	; 0xacc <Set_OCR_Value+0x80>
 a82:	2a 81       	ldd	r18, Y+2	; 0x02
 a84:	3b 81       	ldd	r19, Y+3	; 0x03
 a86:	23 30       	cpi	r18, 0x03	; 3
 a88:	31 05       	cpc	r19, r1
 a8a:	2c f5       	brge	.+74     	; 0xad6 <Set_OCR_Value+0x8a>
 a8c:	8a 81       	ldd	r24, Y+2	; 0x02
 a8e:	9b 81       	ldd	r25, Y+3	; 0x03
 a90:	81 30       	cpi	r24, 0x01	; 1
 a92:	91 05       	cpc	r25, r1
 a94:	b1 f0       	breq	.+44     	; 0xac2 <Set_OCR_Value+0x76>
 a96:	3d c0       	rjmp	.+122    	; 0xb12 <Set_OCR_Value+0xc6>
 a98:	2a 81       	ldd	r18, Y+2	; 0x02
 a9a:	3b 81       	ldd	r19, Y+3	; 0x03
 a9c:	26 30       	cpi	r18, 0x06	; 6
 a9e:	31 05       	cpc	r19, r1
 aa0:	49 f1       	breq	.+82     	; 0xaf4 <Set_OCR_Value+0xa8>
 aa2:	8a 81       	ldd	r24, Y+2	; 0x02
 aa4:	9b 81       	ldd	r25, Y+3	; 0x03
 aa6:	86 30       	cpi	r24, 0x06	; 6
 aa8:	91 05       	cpc	r25, r1
 aaa:	fc f0       	brlt	.+62     	; 0xaea <Set_OCR_Value+0x9e>
 aac:	2a 81       	ldd	r18, Y+2	; 0x02
 aae:	3b 81       	ldd	r19, Y+3	; 0x03
 ab0:	27 30       	cpi	r18, 0x07	; 7
 ab2:	31 05       	cpc	r19, r1
 ab4:	21 f1       	breq	.+72     	; 0xafe <Set_OCR_Value+0xb2>
 ab6:	8a 81       	ldd	r24, Y+2	; 0x02
 ab8:	9b 81       	ldd	r25, Y+3	; 0x03
 aba:	88 30       	cpi	r24, 0x08	; 8
 abc:	91 05       	cpc	r25, r1
 abe:	21 f1       	breq	.+72     	; 0xb08 <Set_OCR_Value+0xbc>
 ac0:	28 c0       	rjmp	.+80     	; 0xb12 <Set_OCR_Value+0xc6>
	{
	case 1u:
		OCR0=31u;
 ac2:	ec e5       	ldi	r30, 0x5C	; 92
 ac4:	f0 e0       	ldi	r31, 0x00	; 0
 ac6:	8f e1       	ldi	r24, 0x1F	; 31
 ac8:	80 83       	st	Z, r24
 aca:	27 c0       	rjmp	.+78     	; 0xb1a <Set_OCR_Value+0xce>
		break;
	case 2u:
		OCR0=62u;
 acc:	ec e5       	ldi	r30, 0x5C	; 92
 ace:	f0 e0       	ldi	r31, 0x00	; 0
 ad0:	8e e3       	ldi	r24, 0x3E	; 62
 ad2:	80 83       	st	Z, r24
 ad4:	22 c0       	rjmp	.+68     	; 0xb1a <Set_OCR_Value+0xce>
		break;
	case 3u:
		OCR0=94u;
 ad6:	ec e5       	ldi	r30, 0x5C	; 92
 ad8:	f0 e0       	ldi	r31, 0x00	; 0
 ada:	8e e5       	ldi	r24, 0x5E	; 94
 adc:	80 83       	st	Z, r24
 ade:	1d c0       	rjmp	.+58     	; 0xb1a <Set_OCR_Value+0xce>
		break;
	case 4u:
		OCR0=125u;
 ae0:	ec e5       	ldi	r30, 0x5C	; 92
 ae2:	f0 e0       	ldi	r31, 0x00	; 0
 ae4:	8d e7       	ldi	r24, 0x7D	; 125
 ae6:	80 83       	st	Z, r24
 ae8:	18 c0       	rjmp	.+48     	; 0xb1a <Set_OCR_Value+0xce>
		break;
	case 5u:
		OCR0=156u;
 aea:	ec e5       	ldi	r30, 0x5C	; 92
 aec:	f0 e0       	ldi	r31, 0x00	; 0
 aee:	8c e9       	ldi	r24, 0x9C	; 156
 af0:	80 83       	st	Z, r24
 af2:	13 c0       	rjmp	.+38     	; 0xb1a <Set_OCR_Value+0xce>
		break;
	case 6u:
		OCR0=187u;
 af4:	ec e5       	ldi	r30, 0x5C	; 92
 af6:	f0 e0       	ldi	r31, 0x00	; 0
 af8:	8b eb       	ldi	r24, 0xBB	; 187
 afa:	80 83       	st	Z, r24
 afc:	0e c0       	rjmp	.+28     	; 0xb1a <Set_OCR_Value+0xce>
		break;
	case 7u:
		OCR0=219u;
 afe:	ec e5       	ldi	r30, 0x5C	; 92
 b00:	f0 e0       	ldi	r31, 0x00	; 0
 b02:	8b ed       	ldi	r24, 0xDB	; 219
 b04:	80 83       	st	Z, r24
 b06:	09 c0       	rjmp	.+18     	; 0xb1a <Set_OCR_Value+0xce>
		break;
	case 8u:
		OCR0=250u;
 b08:	ec e5       	ldi	r30, 0x5C	; 92
 b0a:	f0 e0       	ldi	r31, 0x00	; 0
 b0c:	8a ef       	ldi	r24, 0xFA	; 250
 b0e:	80 83       	st	Z, r24
 b10:	04 c0       	rjmp	.+8      	; 0xb1a <Set_OCR_Value+0xce>
		break;
	default :
		OCR0=250u;
 b12:	ec e5       	ldi	r30, 0x5C	; 92
 b14:	f0 e0       	ldi	r31, 0x00	; 0
 b16:	8a ef       	ldi	r24, 0xFA	; 250
 b18:	80 83       	st	Z, r24
		break;
	}
}
 b1a:	0f 90       	pop	r0
 b1c:	0f 90       	pop	r0
 b1e:	0f 90       	pop	r0
 b20:	cf 91       	pop	r28
 b22:	df 91       	pop	r29
 b24:	08 95       	ret

00000b26 <timer0_Deinit>:
void timer0_Deinit(void)
{
 b26:	df 93       	push	r29
 b28:	cf 93       	push	r28
 b2a:	cd b7       	in	r28, 0x3d	; 61
 b2c:	de b7       	in	r29, 0x3e	; 62
	Clear_Bit(TCCR0,CS00);
 b2e:	a3 e5       	ldi	r26, 0x53	; 83
 b30:	b0 e0       	ldi	r27, 0x00	; 0
 b32:	e3 e5       	ldi	r30, 0x53	; 83
 b34:	f0 e0       	ldi	r31, 0x00	; 0
 b36:	80 81       	ld	r24, Z
 b38:	8e 7f       	andi	r24, 0xFE	; 254
 b3a:	8c 93       	st	X, r24
	Clear_Bit(TCCR0,CS01);
 b3c:	a3 e5       	ldi	r26, 0x53	; 83
 b3e:	b0 e0       	ldi	r27, 0x00	; 0
 b40:	e3 e5       	ldi	r30, 0x53	; 83
 b42:	f0 e0       	ldi	r31, 0x00	; 0
 b44:	80 81       	ld	r24, Z
 b46:	8d 7f       	andi	r24, 0xFD	; 253
 b48:	8c 93       	st	X, r24
	Clear_Bit(TCCR0,CS02);
 b4a:	a3 e5       	ldi	r26, 0x53	; 83
 b4c:	b0 e0       	ldi	r27, 0x00	; 0
 b4e:	e3 e5       	ldi	r30, 0x53	; 83
 b50:	f0 e0       	ldi	r31, 0x00	; 0
 b52:	80 81       	ld	r24, Z
 b54:	8b 7f       	andi	r24, 0xFB	; 251
 b56:	8c 93       	st	X, r24
}
 b58:	cf 91       	pop	r28
 b5a:	df 91       	pop	r29
 b5c:	08 95       	ret

00000b5e <global_interrupt_enable>:
void global_interrupt_enable(void)
{
 b5e:	df 93       	push	r29
 b60:	cf 93       	push	r28
 b62:	cd b7       	in	r28, 0x3d	; 61
 b64:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(SREG,I);
 b66:	af e5       	ldi	r26, 0x5F	; 95
 b68:	b0 e0       	ldi	r27, 0x00	; 0
 b6a:	ef e5       	ldi	r30, 0x5F	; 95
 b6c:	f0 e0       	ldi	r31, 0x00	; 0
 b6e:	80 81       	ld	r24, Z
 b70:	80 68       	ori	r24, 0x80	; 128
 b72:	8c 93       	st	X, r24
}
 b74:	cf 91       	pop	r28
 b76:	df 91       	pop	r29
 b78:	08 95       	ret

00000b7a <global_interrupt_disable>:
void global_interrupt_disable(void)
{
 b7a:	df 93       	push	r29
 b7c:	cf 93       	push	r28
 b7e:	cd b7       	in	r28, 0x3d	; 61
 b80:	de b7       	in	r29, 0x3e	; 62
	Clear_Bit(SREG,I);
 b82:	af e5       	ldi	r26, 0x5F	; 95
 b84:	b0 e0       	ldi	r27, 0x00	; 0
 b86:	ef e5       	ldi	r30, 0x5F	; 95
 b88:	f0 e0       	ldi	r31, 0x00	; 0
 b8a:	80 81       	ld	r24, Z
 b8c:	8f 77       	andi	r24, 0x7F	; 127
 b8e:	8c 93       	st	X, r24
}
 b90:	cf 91       	pop	r28
 b92:	df 91       	pop	r29
 b94:	08 95       	ret

00000b96 <timer_delay>:
void timer_delay(uint32 delay)
{
 b96:	df 93       	push	r29
 b98:	cf 93       	push	r28
 b9a:	cd b7       	in	r28, 0x3d	; 61
 b9c:	de b7       	in	r29, 0x3e	; 62
 b9e:	28 97       	sbiw	r28, 0x08	; 8
 ba0:	0f b6       	in	r0, 0x3f	; 63
 ba2:	f8 94       	cli
 ba4:	de bf       	out	0x3e, r29	; 62
 ba6:	0f be       	out	0x3f, r0	; 63
 ba8:	cd bf       	out	0x3d, r28	; 61
 baa:	6d 83       	std	Y+5, r22	; 0x05
 bac:	7e 83       	std	Y+6, r23	; 0x06
 bae:	8f 83       	std	Y+7, r24	; 0x07
 bb0:	98 87       	std	Y+8, r25	; 0x08
	uint32 i;
	TCNT0=0;
 bb2:	e2 e5       	ldi	r30, 0x52	; 82
 bb4:	f0 e0       	ldi	r31, 0x00	; 0
 bb6:	10 82       	st	Z, r1
	for(i=0;i<(delay);i++)
 bb8:	19 82       	std	Y+1, r1	; 0x01
 bba:	1a 82       	std	Y+2, r1	; 0x02
 bbc:	1b 82       	std	Y+3, r1	; 0x03
 bbe:	1c 82       	std	Y+4, r1	; 0x04
 bc0:	1b c0       	rjmp	.+54     	; 0xbf8 <timer_delay+0x62>
	{
		while(!(TIFR&(1<<OCF0)));
 bc2:	e8 e5       	ldi	r30, 0x58	; 88
 bc4:	f0 e0       	ldi	r31, 0x00	; 0
 bc6:	80 81       	ld	r24, Z
 bc8:	88 2f       	mov	r24, r24
 bca:	90 e0       	ldi	r25, 0x00	; 0
 bcc:	82 70       	andi	r24, 0x02	; 2
 bce:	90 70       	andi	r25, 0x00	; 0
 bd0:	00 97       	sbiw	r24, 0x00	; 0
 bd2:	b9 f3       	breq	.-18     	; 0xbc2 <timer_delay+0x2c>
		Set_Bit(TIFR,OCF0);
 bd4:	a8 e5       	ldi	r26, 0x58	; 88
 bd6:	b0 e0       	ldi	r27, 0x00	; 0
 bd8:	e8 e5       	ldi	r30, 0x58	; 88
 bda:	f0 e0       	ldi	r31, 0x00	; 0
 bdc:	80 81       	ld	r24, Z
 bde:	82 60       	ori	r24, 0x02	; 2
 be0:	8c 93       	st	X, r24
}
void timer_delay(uint32 delay)
{
	uint32 i;
	TCNT0=0;
	for(i=0;i<(delay);i++)
 be2:	89 81       	ldd	r24, Y+1	; 0x01
 be4:	9a 81       	ldd	r25, Y+2	; 0x02
 be6:	ab 81       	ldd	r26, Y+3	; 0x03
 be8:	bc 81       	ldd	r27, Y+4	; 0x04
 bea:	01 96       	adiw	r24, 0x01	; 1
 bec:	a1 1d       	adc	r26, r1
 bee:	b1 1d       	adc	r27, r1
 bf0:	89 83       	std	Y+1, r24	; 0x01
 bf2:	9a 83       	std	Y+2, r25	; 0x02
 bf4:	ab 83       	std	Y+3, r26	; 0x03
 bf6:	bc 83       	std	Y+4, r27	; 0x04
 bf8:	29 81       	ldd	r18, Y+1	; 0x01
 bfa:	3a 81       	ldd	r19, Y+2	; 0x02
 bfc:	4b 81       	ldd	r20, Y+3	; 0x03
 bfe:	5c 81       	ldd	r21, Y+4	; 0x04
 c00:	8d 81       	ldd	r24, Y+5	; 0x05
 c02:	9e 81       	ldd	r25, Y+6	; 0x06
 c04:	af 81       	ldd	r26, Y+7	; 0x07
 c06:	b8 85       	ldd	r27, Y+8	; 0x08
 c08:	28 17       	cp	r18, r24
 c0a:	39 07       	cpc	r19, r25
 c0c:	4a 07       	cpc	r20, r26
 c0e:	5b 07       	cpc	r21, r27
 c10:	c0 f2       	brcs	.-80     	; 0xbc2 <timer_delay+0x2c>
	{
		while(!(TIFR&(1<<OCF0)));
		Set_Bit(TIFR,OCF0);
	}
}
 c12:	28 96       	adiw	r28, 0x08	; 8
 c14:	0f b6       	in	r0, 0x3f	; 63
 c16:	f8 94       	cli
 c18:	de bf       	out	0x3e, r29	; 62
 c1a:	0f be       	out	0x3f, r0	; 63
 c1c:	cd bf       	out	0x3d, r28	; 61
 c1e:	cf 91       	pop	r28
 c20:	df 91       	pop	r29
 c22:	08 95       	ret

00000c24 <OS_SetCallBack>:
void OS_SetCallBack(void(*a_ptr)(void))
{
 c24:	df 93       	push	r29
 c26:	cf 93       	push	r28
 c28:	00 d0       	rcall	.+0      	; 0xc2a <OS_SetCallBack+0x6>
 c2a:	cd b7       	in	r28, 0x3d	; 61
 c2c:	de b7       	in	r29, 0x3e	; 62
 c2e:	9a 83       	std	Y+2, r25	; 0x02
 c30:	89 83       	std	Y+1, r24	; 0x01
	OS_CallBackPtr_g=a_ptr;
 c32:	89 81       	ldd	r24, Y+1	; 0x01
 c34:	9a 81       	ldd	r25, Y+2	; 0x02
 c36:	90 93 67 00 	sts	0x0067, r25
 c3a:	80 93 66 00 	sts	0x0066, r24
}
 c3e:	0f 90       	pop	r0
 c40:	0f 90       	pop	r0
 c42:	cf 91       	pop	r28
 c44:	df 91       	pop	r29
 c46:	08 95       	ret

00000c48 <Task1>:
 *  Created on: 2019-09-16
 *  Author: AbdElkader
 ***********************************************/
#include "OS.h"
void Task1(void)
{
 c48:	df 93       	push	r29
 c4a:	cf 93       	push	r28
 c4c:	cd b7       	in	r28, 0x3d	; 61
 c4e:	de b7       	in	r29, 0x3e	; 62
	PORTB ^=(1<<4);
 c50:	a8 e3       	ldi	r26, 0x38	; 56
 c52:	b0 e0       	ldi	r27, 0x00	; 0
 c54:	e8 e3       	ldi	r30, 0x38	; 56
 c56:	f0 e0       	ldi	r31, 0x00	; 0
 c58:	90 81       	ld	r25, Z
 c5a:	80 e1       	ldi	r24, 0x10	; 16
 c5c:	89 27       	eor	r24, r25
 c5e:	8c 93       	st	X, r24
	//Delete_Task(Task3); /*in case you need to test Delete_Task*/

}
 c60:	cf 91       	pop	r28
 c62:	df 91       	pop	r29
 c64:	08 95       	ret

00000c66 <Task2>:
void Task2(void)
{
 c66:	df 93       	push	r29
 c68:	cf 93       	push	r28
 c6a:	cd b7       	in	r28, 0x3d	; 61
 c6c:	de b7       	in	r29, 0x3e	; 62
	PORTB ^=(1<<5);
 c6e:	a8 e3       	ldi	r26, 0x38	; 56
 c70:	b0 e0       	ldi	r27, 0x00	; 0
 c72:	e8 e3       	ldi	r30, 0x38	; 56
 c74:	f0 e0       	ldi	r31, 0x00	; 0
 c76:	90 81       	ld	r25, Z
 c78:	80 e2       	ldi	r24, 0x20	; 32
 c7a:	89 27       	eor	r24, r25
 c7c:	8c 93       	st	X, r24
}
 c7e:	cf 91       	pop	r28
 c80:	df 91       	pop	r29
 c82:	08 95       	ret

00000c84 <Task3>:
void Task3(void)
{
 c84:	df 93       	push	r29
 c86:	cf 93       	push	r28
 c88:	cd b7       	in	r28, 0x3d	; 61
 c8a:	de b7       	in	r29, 0x3e	; 62
	PORTB ^=(1<<6);
 c8c:	a8 e3       	ldi	r26, 0x38	; 56
 c8e:	b0 e0       	ldi	r27, 0x00	; 0
 c90:	e8 e3       	ldi	r30, 0x38	; 56
 c92:	f0 e0       	ldi	r31, 0x00	; 0
 c94:	90 81       	ld	r25, Z
 c96:	80 e4       	ldi	r24, 0x40	; 64
 c98:	89 27       	eor	r24, r25
 c9a:	8c 93       	st	X, r24
}
 c9c:	cf 91       	pop	r28
 c9e:	df 91       	pop	r29
 ca0:	08 95       	ret

00000ca2 <main>:

int main(void)
{
 ca2:	df 93       	push	r29
 ca4:	cf 93       	push	r28
 ca6:	cd b7       	in	r28, 0x3d	; 61
 ca8:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinDirection(PinB4,HIGH);
 caa:	8c e0       	ldi	r24, 0x0C	; 12
 cac:	61 e0       	ldi	r22, 0x01	; 1
 cae:	0e 94 af 01 	call	0x35e	; 0x35e <DIO_SetPinDirection>
	DIO_SetPinDirection(PinB5,HIGH);
 cb2:	8d e0       	ldi	r24, 0x0D	; 13
 cb4:	61 e0       	ldi	r22, 0x01	; 1
 cb6:	0e 94 af 01 	call	0x35e	; 0x35e <DIO_SetPinDirection>
	DIO_SetPinDirection(PinB6,HIGH);
 cba:	8e e0       	ldi	r24, 0x0E	; 14
 cbc:	61 e0       	ldi	r22, 0x01	; 1
 cbe:	0e 94 af 01 	call	0x35e	; 0x35e <DIO_SetPinDirection>
	DIO_SetPinDirection(PinB7,HIGH);
 cc2:	8f e0       	ldi	r24, 0x0F	; 15
 cc4:	61 e0       	ldi	r22, 0x01	; 1
 cc6:	0e 94 af 01 	call	0x35e	; 0x35e <DIO_SetPinDirection>
	DIO_SetPinDirection(PinA0,HIGH);
 cca:	80 e0       	ldi	r24, 0x00	; 0
 ccc:	61 e0       	ldi	r22, 0x01	; 1
 cce:	0e 94 af 01 	call	0x35e	; 0x35e <DIO_SetPinDirection>
	DIO_SetPinDirection(PinA1,HIGH);
 cd2:	81 e0       	ldi	r24, 0x01	; 1
 cd4:	61 e0       	ldi	r22, 0x01	; 1
 cd6:	0e 94 af 01 	call	0x35e	; 0x35e <DIO_SetPinDirection>
	DIO_WritePin(PinB4,LOW);
 cda:	8c e0       	ldi	r24, 0x0C	; 12
 cdc:	60 e0       	ldi	r22, 0x00	; 0
 cde:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	DIO_WritePin(PinB5,LOW);
 ce2:	8d e0       	ldi	r24, 0x0D	; 13
 ce4:	60 e0       	ldi	r22, 0x00	; 0
 ce6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	DIO_WritePin(PinB6,LOW);
 cea:	8e e0       	ldi	r24, 0x0E	; 14
 cec:	60 e0       	ldi	r22, 0x00	; 0
 cee:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	OS_init();
 cf2:	0e 94 a4 02 	call	0x548	; 0x548 <OS_init>
	Create_Task(Task1,1,1000,1000);
 cf6:	84 e2       	ldi	r24, 0x24	; 36
 cf8:	96 e0       	ldi	r25, 0x06	; 6
 cfa:	61 e0       	ldi	r22, 0x01	; 1
 cfc:	48 ee       	ldi	r20, 0xE8	; 232
 cfe:	53 e0       	ldi	r21, 0x03	; 3
 d00:	28 ee       	ldi	r18, 0xE8	; 232
 d02:	33 e0       	ldi	r19, 0x03	; 3
 d04:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <Create_Task>
	Create_Task(Task2,2,2000,2000);
 d08:	83 e3       	ldi	r24, 0x33	; 51
 d0a:	96 e0       	ldi	r25, 0x06	; 6
 d0c:	62 e0       	ldi	r22, 0x02	; 2
 d0e:	40 ed       	ldi	r20, 0xD0	; 208
 d10:	57 e0       	ldi	r21, 0x07	; 7
 d12:	20 ed       	ldi	r18, 0xD0	; 208
 d14:	37 e0       	ldi	r19, 0x07	; 7
 d16:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <Create_Task>
	Create_Task(Task3,3,3000,3000);
 d1a:	82 e4       	ldi	r24, 0x42	; 66
 d1c:	96 e0       	ldi	r25, 0x06	; 6
 d1e:	63 e0       	ldi	r22, 0x03	; 3
 d20:	48 eb       	ldi	r20, 0xB8	; 184
 d22:	5b e0       	ldi	r21, 0x0B	; 11
 d24:	28 eb       	ldi	r18, 0xB8	; 184
 d26:	3b e0       	ldi	r19, 0x0B	; 11
 d28:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <Create_Task>
	OS_Run();
 d2c:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <OS_Run>
	return 0;
 d30:	80 e0       	ldi	r24, 0x00	; 0
 d32:	90 e0       	ldi	r25, 0x00	; 0
}
 d34:	cf 91       	pop	r28
 d36:	df 91       	pop	r29
 d38:	08 95       	ret

00000d3a <_exit>:
 d3a:	f8 94       	cli

00000d3c <__stop_program>:
 d3c:	ff cf       	rjmp	.-2      	; 0xd3c <__stop_program>
